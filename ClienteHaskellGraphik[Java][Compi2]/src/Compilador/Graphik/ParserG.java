
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 04 01:27:18 CST 2017
//----------------------------------------------------

package Compilador.Graphik;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import java.io.FileReader;
import javax.swing.JOptionPane;
import Compilador.NodoParser;
import Compilador.Analizador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 04 01:27:18 CST 2017
  */
public class ParserG extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserG() {super();}

  /** Constructor which sets the default scanner. */
  public ParserG(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserG(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\061\002\000\002\002" +
    "\004\000\002\057\004\000\002\057\004\000\002\057\004" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\003\007\000\002\003\006\000\002\004\006\000\002" +
    "\004\005\000\002\005\004\000\002\005\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\006\000\002\006\004" +
    "\000\002\007\005\000\002\007\004\000\002\007\004\000" +
    "\002\007\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\010\000" +
    "\002\012\006\000\002\012\007\000\002\012\006\000\002" +
    "\013\006\000\002\013\005\000\002\013\004\000\002\014" +
    "\005\000\002\014\005\000\002\060\006\000\002\060\005" +
    "\000\002\060\011\000\002\060\010\000\002\060\005\000" +
    "\002\060\003\000\002\015\005\000\002\016\005\000\002" +
    "\016\003\000\002\017\006\000\002\017\005\000\002\020" +
    "\007\000\002\020\006\000\002\023\005\000\002\023\003" +
    "\000\002\021\004\000\002\021\003\000\002\022\004\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\022\004\000\002\022\004\000\002" +
    "\052\006\000\002\051\005\000\002\053\010\000\002\054" +
    "\006\000\002\055\006\000\002\056\006\000\002\024\005" +
    "\000\002\024\010\000\002\024\011\000\002\025\004\000" +
    "\002\040\007\000\002\040\011\000\002\041\011\000\002" +
    "\042\004\000\002\042\003\000\002\043\006\000\002\043" +
    "\005\000\002\044\021\000\002\044\015\000\002\045\011" +
    "\000\002\046\012\000\002\047\010\000\002\026\005\000" +
    "\002\026\003\000\002\035\005\000\002\035\003\000\002" +
    "\027\005\000\002\027\003\000\002\036\004\000\002\036" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\003\000\002\031\005\000\002\031\005\000\002" +
    "\031\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\004\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\004\000\002\037\005\000" +
    "\002\050\006\000\002\050\005\000\002\050\006\000\002" +
    "\050\005\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\010\011\000\023\000\030\000\001\002\000" +
    "\010\011\012\023\013\030\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\012\002\uffff\011" +
    "\012\023\013\030\011\001\002\000\012\002\ufffa\011\ufffa" +
    "\023\ufffa\030\u013f\001\002\000\004\100\u013d\001\002\000" +
    "\004\100\u013c\001\002\000\004\100\u0139\001\002\000\012" +
    "\002\ufff9\011\012\023\ufff9\030\ufff9\001\002\000\012\002" +
    "\ufffb\011\ufffb\023\u0134\030\ufffb\001\002\000\020\002\ufff3" +
    "\011\ufff3\023\ufff3\024\017\030\ufff3\071\021\076\020\001" +
    "\002\000\004\100\u0133\001\002\000\010\020\053\021\052" +
    "\022\054\001\002\000\024\004\030\005\023\006\036\007" +
    "\022\010\025\011\024\012\027\015\031\100\033\001\002" +
    "\000\004\100\uffe7\001\002\000\004\100\uffe9\001\002\000" +
    "\004\100\uffe5\001\002\000\004\100\uffe6\001\002\000\032" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\015\uffeb\071\224\072\uffeb\076\223\100\uffeb\001\002" +
    "\000\004\100\uffe4\001\002\000\004\100\uffea\001\002\000" +
    "\022\004\030\005\023\006\036\007\022\010\025\011\024" +
    "\012\027\100\033\001\002\000\006\074\042\075\u012f\001" +
    "\002\000\004\100\uffe3\001\002\000\004\100\u0123\001\002" +
    "\000\026\004\030\005\023\006\036\007\022\010\025\011" +
    "\024\012\027\015\031\072\041\100\033\001\002\000\004" +
    "\100\uffe8\001\002\000\032\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\015\uffed\071\224\072\uffed" +
    "\076\223\100\uffed\001\002\000\006\074\042\075\043\001" +
    "\002\000\020\002\ufff0\011\ufff0\023\ufff0\024\ufff0\030\ufff0" +
    "\071\ufff0\076\ufff0\001\002\000\004\100\044\001\002\000" +
    "\026\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\015\uffee\072\uffee\100\uffee\001\002\000\014\056" +
    "\uffd1\065\uffd1\074\uffd1\075\uffd1\076\uffd1\001\002\000\014" +
    "\056\047\065\046\074\uffd8\075\uffd8\076\050\001\002\000" +
    "\036\004\112\005\061\006\105\007\057\013\070\014\107" +
    "\027\110\031\066\044\056\063\062\070\111\071\077\100" +
    "\074\102\055\001\002\000\040\004\112\005\061\006\105" +
    "\007\057\013\070\014\107\025\106\027\110\031\066\044" +
    "\056\063\062\070\111\071\077\100\074\102\055\001\002" +
    "\000\010\020\053\021\052\022\054\001\002\000\014\056" +
    "\uffd2\065\uffd2\074\uffd2\075\uffd2\076\uffd2\001\002\000\030" +
    "\002\uffe0\011\uffe0\023\uffe0\024\uffe0\030\uffe0\056\uffe0\065" +
    "\uffe0\071\uffe0\074\uffe0\075\uffe0\076\uffe0\001\002\000\030" +
    "\002\uffe2\011\uffe2\023\uffe2\024\uffe2\030\uffe2\056\uffe2\065" +
    "\uffe2\071\uffe2\074\uffe2\075\uffe2\076\uffe2\001\002\000\030" +
    "\002\uffe1\011\uffe1\023\uffe1\024\uffe1\030\uffe1\056\uffe1\065" +
    "\uffe1\071\uffe1\074\uffe1\075\uffe1\076\uffe1\001\002\000\004" +
    "\070\216\001\002\000\034\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\027\110\031\066\044\056\070\111" +
    "\071\077\100\074\102\055\001\002\000\062\043\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84" +
    "\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061" +
    "\uff84\062\uff84\064\uff84\065\uff84\066\uff84\067\uff84\072\uff84" +
    "\074\uff84\075\uff84\076\uff84\001\002\000\026\056\uff9d\060" +
    "\uff9d\062\117\065\uff9d\066\uff9d\067\uff9d\072\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\001\002\000\062\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\064\uff82\065\uff82\066\uff82\067\uff82\072\uff82\074\uff82" +
    "\075\uff82\076\uff82\001\002\000\034\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\027\110\031\066\044\056" +
    "\070\111\071\077\100\074\102\055\001\002\000\062\043" +
    "\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e" +
    "\072\uff7e\074\uff7e\075\uff7e\076\uff7e\001\002\000\062\043" +
    "\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b" +
    "\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060" +
    "\uff7b\061\uff7b\062\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b" +
    "\072\uff7b\074\uff7b\075\uff7b\076\uff7b\001\002\000\066\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\064\uff7a\065\126\066\uff7a\067\uff7a" +
    "\070\127\072\uff7a\073\125\074\uff7a\075\uff7a\076\uff7a\001" +
    "\002\000\004\100\207\001\002\000\016\056\uffd5\060\114" +
    "\065\uffd5\074\uffd5\075\uffd5\076\uffd5\001\002\000\062\043" +
    "\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80" +
    "\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\064\uff80\065\uff80\066\uff80\067\uff80" +
    "\072\uff80\074\uff80\075\uff80\076\uff80\001\002\000\062\043" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\052\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060" +
    "\uff85\061\uff85\062\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\072\uff85\074\uff85\075\uff85\076\uff85\001\002\000\062\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\166\051\165" +
    "\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\062\uff88\064\uff88\065\uff88\066\uff88\067\uff88" +
    "\072\uff88\074\uff88\075\uff88\076\uff88\001\002\000\056\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\163\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062" +
    "\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\072\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\001\002\000\066\043\uff72\044\uff72\045" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053\uff72" +
    "\054\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062" +
    "\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\203\072\uff72" +
    "\073\uff72\074\uff72\075\uff72\076\uff72\001\002\000\054\043" +
    "\uff8d\044\uff8d\045\161\046\160\052\uff8d\053\uff8d\054\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\067\uff8d\072\uff8d\074\uff8d\075\uff8d" +
    "\076\uff8d\001\002\000\050\043\155\044\156\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\064\uff90\065\uff90\066\uff90\067\uff90\072\uff90\074" +
    "\uff90\075\uff90\076\uff90\001\002\000\036\004\112\005\061" +
    "\006\105\007\057\013\070\014\107\027\110\031\066\044" +
    "\056\063\062\070\111\071\077\100\074\102\055\001\002" +
    "\000\044\052\153\053\152\054\147\055\146\056\uff97\057" +
    "\151\060\uff97\061\uff97\062\uff97\064\150\065\uff97\066\uff97" +
    "\067\uff97\072\uff97\074\uff97\075\uff97\076\uff97\001\002\000" +
    "\030\056\uff99\060\uff99\061\uff99\062\uff99\065\uff99\066\uff99" +
    "\067\uff99\072\uff99\074\uff99\075\uff99\076\uff99\001\002\000" +
    "\030\056\uff9b\060\uff9b\061\121\062\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\072\uff9b\074\uff9b\075\uff9b\076\uff9b\001\002\000" +
    "\062\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050\uff79" +
    "\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057" +
    "\uff79\060\uff79\061\uff79\062\uff79\064\uff79\065\uff79\066\uff79" +
    "\067\uff79\072\uff79\074\uff79\075\uff79\076\uff79\001\002\000" +
    "\062\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c" +
    "\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\064\uff7c\065\uff7c\066\uff7c" +
    "\067\uff7c\072\uff7c\074\uff7c\075\uff7c\076\uff7c\001\002\000" +
    "\062\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\072\uff81\074\uff81\075\uff81\076\uff81\001\002\000" +
    "\004\100\141\001\002\000\062\043\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\064\uff7f\065\uff7f\066\uff7f\067\uff7f\072\uff7f\074\uff7f\075" +
    "\uff7f\076\uff7f\001\002\000\004\100\123\001\002\000\036" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\027" +
    "\110\031\066\044\056\063\062\070\111\071\077\100\074" +
    "\102\055\001\002\000\062\043\uff83\044\uff83\045\uff83\046" +
    "\uff83\047\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83" +
    "\055\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\064" +
    "\uff83\065\uff83\066\uff83\067\uff83\072\uff83\074\uff83\075\uff83" +
    "\076\uff83\001\002\000\006\060\114\067\115\001\002\000" +
    "\036\004\112\005\061\006\105\007\057\013\070\014\107" +
    "\027\110\031\066\044\056\063\062\070\111\071\077\100" +
    "\074\102\055\001\002\000\062\043\uff77\044\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77\062\uff77" +
    "\064\uff77\065\uff77\066\uff77\067\uff77\072\uff77\074\uff77\075" +
    "\uff77\076\uff77\001\002\000\026\056\uff9e\060\uff9e\062\117" +
    "\065\uff9e\066\uff9e\067\uff9e\072\uff9e\074\uff9e\075\uff9e\076" +
    "\uff9e\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\030\056\uff9c" +
    "\060\uff9c\061\121\062\uff9c\065\uff9c\066\uff9c\067\uff9c\072" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\001\002\000\036\004\112" +
    "\005\061\006\105\007\057\013\070\014\107\027\110\031" +
    "\066\044\056\063\062\070\111\071\077\100\074\102\055" +
    "\001\002\000\030\056\uff9a\060\uff9a\061\uff9a\062\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\072\uff9a\074\uff9a\075\uff9a\076\uff9a" +
    "\001\002\000\066\043\uff72\044\uff72\045\uff72\046\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\064\uff72\065" +
    "\uff72\066\uff72\067\uff72\070\uff72\072\uff72\073\uff72\074\uff72" +
    "\075\uff72\076\uff72\001\002\000\066\043\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062" +
    "\uff7d\064\uff7d\065\126\066\uff7d\067\uff7d\070\127\072\uff7d" +
    "\073\125\074\uff7d\075\uff7d\076\uff7d\001\002\000\004\100" +
    "\140\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\040\004\112" +
    "\005\061\006\105\007\057\013\070\014\107\027\110\031" +
    "\066\044\056\063\062\067\132\070\111\071\077\100\074" +
    "\102\055\001\002\000\006\067\134\074\133\001\002\000" +
    "\010\060\114\067\uffc8\074\uffc8\001\002\000\066\043\uff73" +
    "\044\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052" +
    "\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73" +
    "\061\uff73\062\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070" +
    "\uff73\072\uff73\073\uff73\074\uff73\075\uff73\076\uff73\001\002" +
    "\000\036\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\027\110\031\066\044\056\063\062\070\111\071\077" +
    "\100\074\102\055\001\002\000\066\043\uff74\044\uff74\045" +
    "\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74" +
    "\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062" +
    "\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\072\uff74" +
    "\073\uff74\074\uff74\075\uff74\076\uff74\001\002\000\010\060" +
    "\114\067\uffc9\074\uffc9\001\002\000\006\060\114\066\137" +
    "\001\002\000\066\043\uff76\044\uff76\045\uff76\046\uff76\047" +
    "\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76" +
    "\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\064\uff76\065" +
    "\uff76\066\uff76\067\uff76\070\uff76\072\uff76\073\uff76\074\uff76" +
    "\075\uff76\076\uff76\001\002\000\066\043\uff75\044\uff75\045" +
    "\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75" +
    "\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062" +
    "\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\072\uff75" +
    "\073\uff75\074\uff75\075\uff75\076\uff75\001\002\000\004\070" +
    "\142\001\002\000\040\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\067" +
    "\144\070\111\071\077\100\074\102\055\001\002\000\006" +
    "\067\145\074\133\001\002\000\014\056\uffd3\065\uffd3\074" +
    "\uffd3\075\uffd3\076\uffd3\001\002\000\014\056\uffd4\065\uffd4" +
    "\074\uffd4\075\uffd4\076\uffd4\001\002\000\034\004\112\005" +
    "\061\006\105\007\057\013\070\014\107\027\110\031\066" +
    "\044\056\070\111\071\077\100\074\102\055\001\002\000" +
    "\034\004\112\005\061\006\105\007\057\013\070\014\107" +
    "\027\110\031\066\044\056\070\111\071\077\100\074\102" +
    "\055\001\002\000\034\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\070\111\071" +
    "\077\100\074\102\055\001\002\000\034\004\112\005\061" +
    "\006\105\007\057\013\070\014\107\027\110\031\066\044" +
    "\056\070\111\071\077\100\074\102\055\001\002\000\034" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\027" +
    "\110\031\066\044\056\070\111\071\077\100\074\102\055" +
    "\001\002\000\034\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\070\111\071\077" +
    "\100\074\102\055\001\002\000\050\043\155\044\156\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96" +
    "\061\uff96\062\uff96\064\uff96\065\uff96\066\uff96\067\uff96\072" +
    "\uff96\074\uff96\075\uff96\076\uff96\001\002\000\034\004\112" +
    "\005\061\006\105\007\057\013\070\014\107\027\110\031" +
    "\066\044\056\070\111\071\077\100\074\102\055\001\002" +
    "\000\034\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\027\110\031\066\044\056\070\111\071\077\100\074" +
    "\102\055\001\002\000\054\043\uff8e\044\uff8e\045\161\046" +
    "\160\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e" +
    "\060\uff8e\061\uff8e\062\uff8e\064\uff8e\065\uff8e\066\uff8e\067" +
    "\uff8e\072\uff8e\074\uff8e\075\uff8e\076\uff8e\001\002\000\034" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\027" +
    "\110\031\066\044\056\070\111\071\077\100\074\102\055" +
    "\001\002\000\034\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\070\111\071\077" +
    "\100\074\102\055\001\002\000\056\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\163\052\uff8c\053\uff8c\054\uff8c\055\uff8c" +
    "\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\064\uff8c\065" +
    "\uff8c\066\uff8c\067\uff8c\072\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\001\002\000\034\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\070\111\071\077" +
    "\100\074\102\055\001\002\000\062\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\050\166\051\165\052\uff89\053\uff89" +
    "\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\064\uff89\065\uff89\066\uff89\067\uff89\072\uff89\074\uff89" +
    "\075\uff89\076\uff89\001\002\000\062\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86\061\uff86\062" +
    "\uff86\064\uff86\065\uff86\066\uff86\067\uff86\072\uff86\074\uff86" +
    "\075\uff86\076\uff86\001\002\000\062\043\uff87\044\uff87\045" +
    "\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87" +
    "\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062" +
    "\uff87\064\uff87\065\uff87\066\uff87\067\uff87\072\uff87\074\uff87" +
    "\075\uff87\076\uff87\001\002\000\056\043\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\163\052\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\064\uff8b\065" +
    "\uff8b\066\uff8b\067\uff8b\072\uff8b\074\uff8b\075\uff8b\076\uff8b" +
    "\001\002\000\054\043\uff8f\044\uff8f\045\161\046\160\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\072" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\001\002\000\050\043\155" +
    "\044\156\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\064\uff95\065\uff95\066\uff95" +
    "\067\uff95\072\uff95\074\uff95\075\uff95\076\uff95\001\002\000" +
    "\050\043\155\044\156\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91\064\uff91\065" +
    "\uff91\066\uff91\067\uff91\072\uff91\074\uff91\075\uff91\076\uff91" +
    "\001\002\000\050\043\155\044\156\052\uff92\053\uff92\054" +
    "\uff92\055\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92" +
    "\064\uff92\065\uff92\066\uff92\067\uff92\072\uff92\074\uff92\075" +
    "\uff92\076\uff92\001\002\000\050\043\155\044\156\052\uff94" +
    "\053\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\064\uff94\065\uff94\066\uff94\067\uff94\072\uff94" +
    "\074\uff94\075\uff94\076\uff94\001\002\000\050\043\155\044" +
    "\156\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93\057\uff93" +
    "\060\uff93\061\uff93\062\uff93\064\uff93\065\uff93\066\uff93\067" +
    "\uff93\072\uff93\074\uff93\075\uff93\076\uff93\001\002\000\010" +
    "\060\114\072\uffce\074\uffce\001\002\000\006\072\201\074" +
    "\200\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\062\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\072" +
    "\uffd0\074\uffd0\075\uffd0\076\uffd0\001\002\000\010\060\114" +
    "\072\uffcf\074\uffcf\001\002\000\040\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\027\110\031\066\044\056" +
    "\063\062\067\205\070\111\071\077\100\074\102\055\001" +
    "\002\000\006\067\206\074\133\001\002\000\062\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052" +
    "\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc" +
    "\061\uffcc\062\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\072" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\001\002\000\062\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\072" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\001\002\000\004\070\210" +
    "\001\002\000\040\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\063\062\067\212" +
    "\070\111\071\077\100\074\102\055\001\002\000\006\067" +
    "\213\074\133\001\002\000\062\043\uffca\044\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\072\uffca\074\uffca\075" +
    "\uffca\076\uffca\001\002\000\062\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\074\uffcb\075" +
    "\uffcb\076\uffcb\001\002\000\044\052\153\053\152\054\147" +
    "\055\146\056\uff98\057\151\060\uff98\061\uff98\062\uff98\064" +
    "\150\065\uff98\066\uff98\067\uff98\072\uff98\074\uff98\075\uff98" +
    "\076\uff98\001\002\000\062\043\uff78\044\uff78\045\uff78\046" +
    "\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78" +
    "\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78\064" +
    "\uff78\065\uff78\066\uff78\067\uff78\072\uff78\074\uff78\075\uff78" +
    "\076\uff78\001\002\000\036\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\027\110\031\066\044\056\063\062" +
    "\070\111\071\077\100\074\102\055\001\002\000\006\060" +
    "\114\067\220\001\002\000\062\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\064\uffb4\065\uffb4\066\uffb4\067\uffb4\072\uffb4\074\uffb4\075" +
    "\uffb4\076\uffb4\001\002\000\006\060\114\066\222\001\002" +
    "\000\014\056\uffd6\065\uffd6\074\uffd6\075\uffd6\076\uffd6\001" +
    "\002\000\010\020\053\021\052\022\054\001\002\000\072" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\015" +
    "\031\016\226\026\261\027\110\031\066\032\247\035\256" +
    "\036\234\037\253\040\236\041\254\042\241\044\056\070" +
    "\111\071\077\100\074\102\055\103\244\104\257\105\246" +
    "\106\260\107\230\001\002\000\004\075\u011e\001\002\000" +
    "\004\070\u0118\001\002\000\004\075\u0117\001\002\000\004" +
    "\070\u0114\001\002\000\100\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\026\uffbb\027\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\044\uffbb\070\uffbb\071\uffbb" +
    "\072\uffbb\100\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106" +
    "\uffbb\107\uffbb\001\002\000\004\075\u0113\001\002\000\102" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\u010f\026\uffbc\027\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\070\uffbc\071\uffbc\072\uffbc\100\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\001" +
    "\002\000\004\070\u0109\001\002\000\100\004\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\026" +
    "\uffb9\027\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\100\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\106\uffb9\107\uffb9\001\002\000\004\075\u0108\001" +
    "\002\000\012\050\uff85\051\uff85\056\332\075\uff85\001\002" +
    "\000\010\050\166\051\165\075\u0107\001\002\000\004\070" +
    "\u0102\001\002\000\074\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\015\031\016\226\026\261\027\110\031" +
    "\066\032\247\035\256\036\234\037\253\040\236\041\254" +
    "\042\241\044\056\070\111\071\077\072\u0101\100\074\102" +
    "\055\103\244\104\257\105\246\106\260\107\230\001\002" +
    "\000\100\004\uffba\005\uffba\006\uffba\007\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\026\uffba\027\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\044\uffba\070\uffba\071\uffba\072\uffba\100\uffba" +
    "\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107\uffba\001" +
    "\002\000\004\056\377\001\002\000\004\075\376\001\002" +
    "\000\004\070\373\001\002\000\004\070\354\001\002\000" +
    "\100\004\uffb8\005\uffb8\006\uffb8\007\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\026\uffb8\027\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\044\uffb8\070\uffb8\071\uffb8\072\uffb8\100\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\001\002" +
    "\000\004\075\353\001\002\000\100\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\026\uffc6" +
    "\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\100\uffc6\102\uffc6\103\uffc6\104\uffc6\105" +
    "\uffc6\106\uffc6\107\uffc6\001\002\000\004\071\344\001\002" +
    "\000\004\075\343\001\002\000\004\075\342\001\002\000" +
    "\004\070\301\001\002\000\004\070\274\001\002\000\004" +
    "\070\271\001\002\000\036\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\027\110\031\066\044\056\063\062" +
    "\070\111\071\077\100\074\102\055\001\002\000\006\074" +
    "\042\075\267\001\002\000\004\075\266\001\002\000\004" +
    "\075\265\001\002\000\100\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\026\uffc2\027\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\070\uffc2\071\uffc2" +
    "\072\uffc2\100\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\001\002\000\100\004\uffc4\005\uffc4\006\uffc4" +
    "\007\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\026\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\070\uffc4\071" +
    "\uffc4\072\uffc4\100\uffc4\102\uffc4\103\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\001\002\000\100\004\uffc5\005\uffc5\006" +
    "\uffc5\007\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\026\uffc5" +
    "\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\044\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\100\uffc5\102\uffc5\103\uffc5\104\uffc5\105" +
    "\uffc5\106\uffc5\107\uffc5\001\002\000\006\060\114\075\uffab" +
    "\001\002\000\036\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\063\062\070\111" +
    "\071\077\100\074\102\055\001\002\000\006\060\114\067" +
    "\273\001\002\000\004\075\uffb0\001\002\000\036\004\112" +
    "\005\061\006\105\007\057\013\070\014\107\027\110\031" +
    "\066\044\056\063\062\070\111\071\077\100\074\102\055" +
    "\001\002\000\006\060\114\067\276\001\002\000\004\056" +
    "\277\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\006\060\114" +
    "\075\uffb2\001\002\000\036\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\015\304\027\110\031\066\044\056" +
    "\070\111\071\077\100\074\102\055\001\002\000\004\056" +
    "\332\001\002\000\004\076\322\001\002\000\022\004\030" +
    "\005\023\006\036\007\022\010\025\011\024\012\027\100" +
    "\033\001\002\000\004\100\306\001\002\000\004\056\307" +
    "\001\002\000\036\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\063\062\070\111" +
    "\071\077\100\074\102\055\001\002\000\006\060\114\076" +
    "\311\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\006\060\114" +
    "\076\313\001\002\000\036\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\027\110\031\066\044\056\063\062" +
    "\070\111\071\077\100\074\102\055\001\002\000\006\060" +
    "\114\067\315\001\002\000\004\071\316\001\002\000\072" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\015" +
    "\031\016\226\026\261\027\110\031\066\032\247\035\256" +
    "\036\234\037\253\040\236\041\254\042\241\044\056\070" +
    "\111\071\077\100\074\102\055\103\244\104\257\105\246" +
    "\106\260\107\230\001\002\000\074\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\015\031\016\226\026\261" +
    "\027\110\031\066\032\247\035\256\036\234\037\253\040" +
    "\236\041\254\042\241\044\056\070\111\071\077\072\320" +
    "\100\074\102\055\103\244\104\257\105\246\106\260\107" +
    "\230\001\002\000\100\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\026\uffa3\027\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\044\uffa3\070\uffa3\071\uffa3\072" +
    "\uffa3\100\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3" +
    "\107\uffa3\001\002\000\100\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\026\uffc7\027\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\070\uffc7\071\uffc7" +
    "\072\uffc7\100\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106" +
    "\uffc7\107\uffc7\001\002\000\036\004\112\005\061\006\105" +
    "\007\057\013\070\014\107\027\110\031\066\044\056\063" +
    "\062\070\111\071\077\100\074\102\055\001\002\000\006" +
    "\060\114\076\324\001\002\000\036\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\027\110\031\066\044\056" +
    "\063\062\070\111\071\077\100\074\102\055\001\002\000" +
    "\006\060\114\067\326\001\002\000\004\071\327\001\002" +
    "\000\072\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\015\031\016\226\026\261\027\110\031\066\032\247" +
    "\035\256\036\234\037\253\040\236\041\254\042\241\044" +
    "\056\070\111\071\077\100\074\102\055\103\244\104\257" +
    "\105\246\106\260\107\230\001\002\000\074\004\112\005" +
    "\061\006\105\007\057\013\070\014\107\015\031\016\226" +
    "\026\261\027\110\031\066\032\247\035\256\036\234\037" +
    "\253\040\236\041\254\042\241\044\056\070\111\071\077" +
    "\072\331\100\074\102\055\103\244\104\257\105\246\106" +
    "\260\107\230\001\002\000\100\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\026\uffa2\027" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\044\uffa2\070\uffa2\071" +
    "\uffa2\072\uffa2\100\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\001\002\000\040\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\025\334\027\110\031\066" +
    "\044\056\063\062\070\111\071\077\100\074\102\055\001" +
    "\002\000\010\060\114\075\uffae\076\uffae\001\002\000\004" +
    "\100\335\001\002\000\004\070\336\001\002\000\040\004" +
    "\112\005\061\006\105\007\057\013\070\014\107\027\110" +
    "\031\066\044\056\063\062\067\340\070\111\071\077\100" +
    "\074\102\055\001\002\000\006\060\114\067\341\001\002" +
    "\000\006\075\uffad\076\uffad\001\002\000\006\075\uffac\076" +
    "\uffac\001\002\000\100\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\026\uffc3\027\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\044\uffc3\070\uffc3\071\uffc3\072" +
    "\uffc3\100\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3" +
    "\107\uffc3\001\002\000\100\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\026\uffb6\027\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\041\uffb6\042\uffb6\044\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\100\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106" +
    "\uffb6\107\uffb6\001\002\000\072\004\112\005\061\006\105" +
    "\007\057\013\070\014\107\015\031\016\226\026\261\027" +
    "\110\031\066\032\247\035\256\036\234\037\253\040\236" +
    "\041\254\042\241\044\056\070\111\071\077\100\074\102" +
    "\055\103\244\104\257\105\246\106\260\107\230\001\002" +
    "\000\074\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\015\031\016\226\026\261\027\110\031\066\032\247" +
    "\035\256\036\234\037\253\040\236\041\254\042\241\044" +
    "\056\070\111\071\077\072\346\100\074\102\055\103\244" +
    "\104\257\105\246\106\260\107\230\001\002\000\004\036" +
    "\347\001\002\000\004\070\350\001\002\000\036\004\112" +
    "\005\061\006\105\007\057\013\070\014\107\027\110\031" +
    "\066\044\056\063\062\070\111\071\077\100\074\102\055" +
    "\001\002\000\006\060\114\067\352\001\002\000\100\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\026\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\044\uffa0\070\uffa0\071\uffa0\072\uffa0\100\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\001\002\000\100" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\016\uffc0\026\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\044\uffc0\070\uffc0\071\uffc0\072\uffc0\100\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000" +
    "\036\004\112\005\061\006\105\007\057\013\070\014\107" +
    "\027\110\031\066\044\056\063\062\070\111\071\077\100" +
    "\074\102\055\001\002\000\006\060\114\067\356\001\002" +
    "\000\004\071\357\001\002\000\006\033\363\034\361\001" +
    "\002\000\010\033\363\034\361\072\372\001\002\000\004" +
    "\076\367\001\002\000\010\033\uffa6\034\uffa6\072\uffa6\001" +
    "\002\000\036\004\112\005\061\006\105\007\057\013\070" +
    "\014\107\027\110\031\066\044\056\063\062\070\111\071" +
    "\077\100\074\102\055\001\002\000\006\060\114\076\365" +
    "\001\002\000\072\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\015\031\016\226\026\261\027\110\031\066" +
    "\032\247\035\256\036\234\037\253\040\236\041\254\042" +
    "\241\044\056\070\111\071\077\100\074\102\055\103\244" +
    "\104\257\105\246\106\260\107\230\001\002\000\100\004" +
    "\112\005\061\006\105\007\057\013\070\014\107\015\031" +
    "\016\226\026\261\027\110\031\066\032\247\033\uffa5\034" +
    "\uffa5\035\256\036\234\037\253\040\236\041\254\042\241" +
    "\044\056\070\111\071\077\072\uffa5\100\074\102\055\103" +
    "\244\104\257\105\246\106\260\107\230\001\002\000\072" +
    "\004\112\005\061\006\105\007\057\013\070\014\107\015" +
    "\031\016\226\026\261\027\110\031\066\032\247\035\256" +
    "\036\234\037\253\040\236\041\254\042\241\044\056\070" +
    "\111\071\077\100\074\102\055\103\244\104\257\105\246" +
    "\106\260\107\230\001\002\000\100\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\015\031\016\226\026\261" +
    "\027\110\031\066\032\247\033\uffa4\034\uffa4\035\256\036" +
    "\234\037\253\040\236\041\254\042\241\044\056\070\111" +
    "\071\077\072\uffa4\100\074\102\055\103\244\104\257\105" +
    "\246\106\260\107\230\001\002\000\010\033\uffa7\034\uffa7" +
    "\072\uffa7\001\002\000\100\004\uffa8\005\uffa8\006\uffa8\007" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\040\uffa8\041\uffa8\042\uffa8\044\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\100\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106" +
    "\uffa8\107\uffa8\001\002\000\036\004\112\005\061\006\105" +
    "\007\057\013\070\014\107\027\110\031\066\044\056\063" +
    "\062\070\111\071\077\100\074\102\055\001\002\000\006" +
    "\060\114\067\375\001\002\000\004\075\uffb1\001\002\000" +
    "\100\004\uffc1\005\uffc1\006\uffc1\007\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\044\uffc1\070\uffc1\071\uffc1\072\uffc1\100\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002" +
    "\000\036\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\027\110\031\066\044\056\063\062\070\111\071\077" +
    "\100\074\102\055\001\002\000\006\060\114\075\uffb3\001" +
    "\002\000\032\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\015\uffde\071\uffde\072\uffde\076\uffde\100" +
    "\uffde\001\002\000\036\004\112\005\061\006\105\007\057" +
    "\013\070\014\107\027\110\031\066\044\056\063\062\070" +
    "\111\071\077\100\074\102\055\001\002\000\006\060\114" +
    "\074\u0104\001\002\000\036\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\027\110\031\066\044\056\063\062" +
    "\070\111\071\077\100\074\102\055\001\002\000\006\060" +
    "\114\067\u0106\001\002\000\004\075\uff9f\001\002\000\100" +
    "\004\uffb5\005\uffb5\006\uffb5\007\uffb5\013\uffb5\014\uffb5\015" +
    "\uffb5\016\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\044\uffb5\070\uffb5\071\uffb5\072\uffb5\100\uffb5\102\uffb5" +
    "\103\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\001\002\000" +
    "\100\004\uffb7\005\uffb7\006\uffb7\007\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\044\uffb7\070\uffb7\071\uffb7\072\uffb7\100\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\001\002" +
    "\000\036\004\112\005\061\006\105\007\057\013\070\014" +
    "\107\027\110\031\066\044\056\063\062\070\111\071\077" +
    "\100\074\102\055\001\002\000\006\060\114\067\u010b\001" +
    "\002\000\004\071\u010c\001\002\000\072\004\112\005\061" +
    "\006\105\007\057\013\070\014\107\015\031\016\226\026" +
    "\261\027\110\031\066\032\247\035\256\036\234\037\253" +
    "\040\236\041\254\042\241\044\056\070\111\071\077\100" +
    "\074\102\055\103\244\104\257\105\246\106\260\107\230" +
    "\001\002\000\074\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\015\031\016\226\026\261\027\110\031\066" +
    "\032\247\035\256\036\234\037\253\040\236\041\254\042" +
    "\241\044\056\070\111\071\077\072\u010e\100\074\102\055" +
    "\103\244\104\257\105\246\106\260\107\230\001\002\000" +
    "\100\004\uffa1\005\uffa1\006\uffa1\007\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\026\uffa1\027\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1" +
    "\042\uffa1\044\uffa1\070\uffa1\071\uffa1\072\uffa1\100\uffa1\102" +
    "\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\001\002" +
    "\000\004\071\u0110\001\002\000\072\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\015\031\016\226\026\261" +
    "\027\110\031\066\032\247\035\256\036\234\037\253\040" +
    "\236\041\254\042\241\044\056\070\111\071\077\100\074" +
    "\102\055\103\244\104\257\105\246\106\260\107\230\001" +
    "\002\000\074\004\112\005\061\006\105\007\057\013\070" +
    "\014\107\015\031\016\226\026\261\027\110\031\066\032" +
    "\247\035\256\036\234\037\253\040\236\041\254\042\241" +
    "\044\056\070\111\071\077\072\u0112\100\074\102\055\103" +
    "\244\104\257\105\246\106\260\107\230\001\002\000\102" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\026\uffaa\027\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\044\uffaa\070\uffaa\071\uffaa\072\uffaa\100\uffaa" +
    "\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\001" +
    "\002\000\100\004\uffbe\005\uffbe\006\uffbe\007\uffbe\013\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\026\uffbe\027\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\070\uffbe\071\uffbe\072\uffbe\100" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe" +
    "\001\002\000\036\004\112\005\061\006\105\007\057\013" +
    "\070\014\107\027\110\031\066\044\056\063\062\070\111" +
    "\071\077\100\074\102\055\001\002\000\006\060\114\067" +
    "\u0116\001\002\000\004\075\uffaf\001\002\000\100\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\070\uffbf\071\uffbf\072\uffbf\100\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\105\uffbf\106\uffbf\107\uffbf\001\002\000\036\004" +
    "\112\005\061\006\105\007\057\013\070\014\107\027\110" +
    "\031\066\044\056\063\062\070\111\071\077\100\074\102" +
    "\055\001\002\000\006\060\114\067\u011a\001\002\000\004" +
    "\071\u011b\001\002\000\072\004\112\005\061\006\105\007" +
    "\057\013\070\014\107\015\031\016\226\026\261\027\110" +
    "\031\066\032\247\035\256\036\234\037\253\040\236\041" +
    "\254\042\241\044\056\070\111\071\077\100\074\102\055" +
    "\103\244\104\257\105\246\106\260\107\230\001\002\000" +
    "\074\004\112\005\061\006\105\007\057\013\070\014\107" +
    "\015\031\016\226\026\261\027\110\031\066\032\247\035" +
    "\256\036\234\037\253\040\236\041\254\042\241\044\056" +
    "\070\111\071\077\072\u011d\100\074\102\055\103\244\104" +
    "\257\105\246\106\260\107\230\001\002\000\102\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\026\uffa9\027\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\044\uffa9\070\uffa9\071\uffa9\072\uffa9\100\uffa9\102\uffa9" +
    "\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\001\002\000" +
    "\100\004\uffbd\005\uffbd\006\uffbd\007\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd" +
    "\042\uffbd\044\uffbd\070\uffbd\071\uffbd\072\uffbd\100\uffbd\102" +
    "\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\001\002" +
    "\000\004\071\u0120\001\002\000\072\004\112\005\061\006" +
    "\105\007\057\013\070\014\107\015\031\016\226\026\261" +
    "\027\110\031\066\032\247\035\256\036\234\037\253\040" +
    "\236\041\254\042\241\044\056\070\111\071\077\100\074" +
    "\102\055\103\244\104\257\105\246\106\260\107\230\001" +
    "\002\000\074\004\112\005\061\006\105\007\057\013\070" +
    "\014\107\015\031\016\226\026\261\027\110\031\066\032" +
    "\247\035\256\036\234\037\253\040\236\041\254\042\241" +
    "\044\056\070\111\071\077\072\u0122\100\074\102\055\103" +
    "\244\104\257\105\246\106\260\107\230\001\002\000\032" +
    "\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012" +
    "\uffdf\015\uffdf\071\uffdf\072\uffdf\076\uffdf\100\uffdf\001\002" +
    "\000\004\070\u0124\001\002\000\024\004\030\005\023\006" +
    "\036\007\022\010\025\011\024\012\027\067\u0125\100\033" +
    "\001\002\000\032\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\015\uffdc\071\uffdc\072\uffdc\076\uffdc" +
    "\100\uffdc\001\002\000\004\100\u012e\001\002\000\010\065" +
    "\u0129\067\u012a\074\u0128\001\002\000\022\004\030\005\023" +
    "\006\036\007\022\010\025\011\024\012\027\100\033\001" +
    "\002\000\004\066\u012b\001\002\000\032\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd\071" +
    "\uffdd\072\uffdd\076\uffdd\100\uffdd\001\002\000\010\065\uffda" +
    "\067\uffda\074\uffda\001\002\000\004\100\u012d\001\002\000" +
    "\010\065\uffdb\067\uffdb\074\uffdb\001\002\000\010\065\uffd9" +
    "\067\uffd9\074\uffd9\001\002\000\026\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\072\uffec" +
    "\100\uffec\001\002\000\004\100\044\001\002\000\014\056" +
    "\047\065\046\074\uffd7\075\uffd7\076\050\001\002\000\020" +
    "\002\ufff2\011\ufff2\023\ufff2\024\ufff2\030\ufff2\071\ufff2\076" +
    "\ufff2\001\002\000\020\002\ufff1\011\ufff1\023\ufff1\024\ufff1" +
    "\030\ufff1\071\ufff1\076\ufff1\001\002\000\004\100\u0135\001" +
    "\002\000\004\077\u0136\001\002\000\004\075\u0137\001\002" +
    "\000\012\002\ufff8\011\ufff8\023\ufff8\030\ufff8\001\002\000" +
    "\020\002\ufff4\011\ufff4\023\ufff4\024\017\030\ufff4\071\021" +
    "\076\020\001\002\000\004\077\u013a\001\002\000\004\075" +
    "\u013b\001\002\000\012\002\ufff7\011\ufff7\023\ufff7\030\ufff7" +
    "\001\002\000\020\002\uffef\011\uffef\023\uffef\024\uffef\030" +
    "\uffef\071\uffef\076\uffef\001\002\000\004\075\u013e\001\002" +
    "\000\012\002\ufff5\011\ufff5\023\ufff5\030\ufff5\001\002\000" +
    "\004\100\u0140\001\002\000\004\075\u0141\001\002\000\012" +
    "\002\ufff6\011\ufff6\023\ufff6\030\ufff6\001\002\000\012\002" +
    "\ufffd\011\ufffd\023\ufffd\030\u013f\001\002\000\012\002\ufffc" +
    "\011\012\023\ufffc\030\ufffc\001\002\000\012\002\ufffe\011" +
    "\ufffe\023\u0134\030\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\006\002\004\061\003\001\001\000\014\003" +
    "\014\004\007\005\013\006\015\057\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\u0143\004\u0141\005" +
    "\u0142\006\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\u0137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\u0131\001\001\000\012\007\034\010\033\012" +
    "\025\014\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\033\012\036\014\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\015\062\017\103\020\063\026" +
    "\220\027\101\030\077\031\075\032\074\033\072\034\071" +
    "\035\057\036\100\037\070\050\064\052\102\001\001\000" +
    "\040\015\062\017\103\020\063\026\066\027\101\030\077" +
    "\031\075\032\074\033\072\034\071\035\057\036\100\037" +
    "\070\050\064\052\102\001\001\000\004\011\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\062\017\103" +
    "\020\063\037\214\050\064\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\062" +
    "\017\103\020\063\030\213\031\075\032\074\033\072\034" +
    "\071\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\015\062\016\176\017\103" +
    "\020\063\026\175\027\101\030\077\031\075\032\074\033" +
    "\072\034\071\035\057\036\100\037\070\050\064\052\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\123\001" +
    "\001\000\040\015\062\017\103\020\063\026\112\027\101" +
    "\030\077\031\075\032\074\033\072\034\071\035\057\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\015\062\017\103\020\063\027" +
    "\101\030\077\031\075\032\074\033\072\034\071\035\115" +
    "\036\100\037\070\050\064\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\015\062\017\103\020\063" +
    "\027\117\030\077\031\075\032\074\033\072\034\071\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\032\015\062\017\103\020\063\030\077\031\075\032" +
    "\074\033\072\034\071\036\121\037\070\050\064\052\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\015\062\017\103\020\063" +
    "\026\135\027\101\030\077\031\075\032\074\033\072\034" +
    "\071\035\057\036\100\037\070\050\064\052\102\001\001" +
    "\000\042\015\062\017\103\020\063\023\127\026\130\027" +
    "\101\030\077\031\075\032\074\033\072\034\071\035\057" +
    "\036\100\037\070\050\064\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\015\062" +
    "\017\103\020\063\026\134\027\101\030\077\031\075\032" +
    "\074\033\072\034\071\035\057\036\100\037\070\050\064" +
    "\052\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\015\062\017\103\020\063\023\142\026" +
    "\130\027\101\030\077\031\075\032\074\033\072\034\071" +
    "\035\057\036\100\037\070\050\064\052\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\062\017\103\020\063\031\174\032\074\033\072\034" +
    "\071\037\070\050\064\052\102\001\001\000\026\015\062" +
    "\017\103\020\063\031\173\032\074\033\072\034\071\037" +
    "\070\050\064\052\102\001\001\000\026\015\062\017\103" +
    "\020\063\031\172\032\074\033\072\034\071\037\070\050" +
    "\064\052\102\001\001\000\026\015\062\017\103\020\063" +
    "\031\171\032\074\033\072\034\071\037\070\050\064\052" +
    "\102\001\001\000\026\015\062\017\103\020\063\031\170" +
    "\032\074\033\072\034\071\037\070\050\064\052\102\001" +
    "\001\000\026\015\062\017\103\020\063\031\153\032\074" +
    "\033\072\034\071\037\070\050\064\052\102\001\001\000" +
    "\002\001\001\000\024\015\062\017\103\020\063\032\167" +
    "\033\072\034\071\037\070\050\064\052\102\001\001\000" +
    "\024\015\062\017\103\020\063\032\156\033\072\034\071" +
    "\037\070\050\064\052\102\001\001\000\002\001\001\000" +
    "\022\015\062\017\103\020\063\033\166\034\071\037\070" +
    "\050\064\052\102\001\001\000\022\015\062\017\103\020" +
    "\063\033\161\034\071\037\070\050\064\052\102\001\001" +
    "\000\002\001\001\000\020\015\062\017\103\020\063\034" +
    "\163\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\015\062\017\103\020\063" +
    "\026\201\027\101\030\077\031\075\032\074\033\072\034" +
    "\071\035\057\036\100\037\070\050\064\052\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\062\017" +
    "\103\020\063\023\203\026\130\027\101\030\077\031\075" +
    "\032\074\033\072\034\071\035\057\036\100\037\070\050" +
    "\064\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\062\017" +
    "\103\020\063\023\210\026\130\027\101\030\077\031\075" +
    "\032\074\033\072\034\071\035\057\036\100\037\070\050" +
    "\064\052\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\015\062\017\103\020\063\026\216\027\101\030\077" +
    "\031\075\032\074\033\072\034\071\035\057\036\100\037" +
    "\070\050\064\052\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u011e\001\001\000\060\014\261\015\062\017\103\020\063" +
    "\021\241\022\251\024\262\025\254\034\237\037\236\040" +
    "\232\041\230\044\242\045\234\046\247\047\263\050\064" +
    "\051\244\052\102\053\250\054\226\055\231\056\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\014\261\015\062\017\103\020\063\022\320" +
    "\024\262\025\254\034\237\037\236\040\232\041\230\044" +
    "\242\045\234\046\247\047\263\050\064\051\244\052\102" +
    "\053\250\054\226\055\231\056\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\015\062\017\103\020\063\026\267\027\101" +
    "\030\077\031\075\032\074\033\072\034\071\035\057\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\015\062\017\103\020\063\026\271\027\101\030\077\031" +
    "\075\032\074\033\072\034\071\035\057\036\100\037\070" +
    "\050\064\052\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\015\062\017\103\020\063\026\274\027\101" +
    "\030\077\031\075\032\074\033\072\034\071\035\057\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\015\062\017\103\020\063\026" +
    "\277\027\101\030\077\031\075\032\074\033\072\034\071" +
    "\035\057\036\100\037\070\050\064\052\102\001\001\000" +
    "\002\001\001\000\020\015\062\017\103\020\063\024\302" +
    "\037\301\050\064\052\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\015\062\017\103\020\063\026" +
    "\307\027\101\030\077\031\075\032\074\033\072\034\071" +
    "\035\057\036\100\037\070\050\064\052\102\001\001\000" +
    "\002\001\001\000\040\015\062\017\103\020\063\026\311" +
    "\027\101\030\077\031\075\032\074\033\072\034\071\035" +
    "\057\036\100\037\070\050\064\052\102\001\001\000\002" +
    "\001\001\000\040\015\062\017\103\020\063\026\313\027" +
    "\101\030\077\031\075\032\074\033\072\034\071\035\057" +
    "\036\100\037\070\050\064\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\014\261\015\062\017\103" +
    "\020\063\021\316\022\251\024\262\025\254\034\237\037" +
    "\236\040\232\041\230\044\242\045\234\046\247\047\263" +
    "\050\064\051\244\052\102\053\250\054\226\055\231\056" +
    "\224\001\001\000\056\014\261\015\062\017\103\020\063" +
    "\022\320\024\262\025\254\034\237\037\236\040\232\041" +
    "\230\044\242\045\234\046\247\047\263\050\064\051\244" +
    "\052\102\053\250\054\226\055\231\056\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\015\062\017\103" +
    "\020\063\026\322\027\101\030\077\031\075\032\074\033" +
    "\072\034\071\035\057\036\100\037\070\050\064\052\102" +
    "\001\001\000\002\001\001\000\040\015\062\017\103\020" +
    "\063\026\324\027\101\030\077\031\075\032\074\033\072" +
    "\034\071\035\057\036\100\037\070\050\064\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\014\261" +
    "\015\062\017\103\020\063\021\327\022\251\024\262\025" +
    "\254\034\237\037\236\040\232\041\230\044\242\045\234" +
    "\046\247\047\263\050\064\051\244\052\102\053\250\054" +
    "\226\055\231\056\224\001\001\000\056\014\261\015\062" +
    "\017\103\020\063\022\320\024\262\025\254\034\237\037" +
    "\236\040\232\041\230\044\242\045\234\046\247\047\263" +
    "\050\064\051\244\052\102\053\250\054\226\055\231\056" +
    "\224\001\001\000\002\001\001\000\040\015\062\017\103" +
    "\020\063\026\332\027\101\030\077\031\075\032\074\033" +
    "\072\034\071\035\057\036\100\037\070\050\064\052\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\015\062\017\103\020\063\026\336\027\101" +
    "\030\077\031\075\032\074\033\072\034\071\035\057\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\014\261\015\062\017\103\020\063" +
    "\021\344\022\251\024\262\025\254\034\237\037\236\040" +
    "\232\041\230\044\242\045\234\046\247\047\263\050\064" +
    "\051\244\052\102\053\250\054\226\055\231\056\224\001" +
    "\001\000\056\014\261\015\062\017\103\020\063\022\320" +
    "\024\262\025\254\034\237\037\236\040\232\041\230\044" +
    "\242\045\234\046\247\047\263\050\064\051\244\052\102" +
    "\053\250\054\226\055\231\056\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\015\062\017\103\020\063" +
    "\026\350\027\101\030\077\031\075\032\074\033\072\034" +
    "\071\035\057\036\100\037\070\050\064\052\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\015\062\017\103\020\063\026\354\027\101\030\077" +
    "\031\075\032\074\033\072\034\071\035\057\036\100\037" +
    "\070\050\064\052\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\357\043\361\001\001\000\004\043" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\015\062\017\103\020\063\026\363\027\101\030\077\031" +
    "\075\032\074\033\072\034\071\035\057\036\100\037\070" +
    "\050\064\052\102\001\001\000\002\001\001\000\060\014" +
    "\261\015\062\017\103\020\063\021\365\022\251\024\262" +
    "\025\254\034\237\037\236\040\232\041\230\044\242\045" +
    "\234\046\247\047\263\050\064\051\244\052\102\053\250" +
    "\054\226\055\231\056\224\001\001\000\056\014\261\015" +
    "\062\017\103\020\063\022\320\024\262\025\254\034\237" +
    "\037\236\040\232\041\230\044\242\045\234\046\247\047" +
    "\263\050\064\051\244\052\102\053\250\054\226\055\231" +
    "\056\224\001\001\000\060\014\261\015\062\017\103\020" +
    "\063\021\367\022\251\024\262\025\254\034\237\037\236" +
    "\040\232\041\230\044\242\045\234\046\247\047\263\050" +
    "\064\051\244\052\102\053\250\054\226\055\231\056\224" +
    "\001\001\000\056\014\261\015\062\017\103\020\063\022" +
    "\320\024\262\025\254\034\237\037\236\040\232\041\230" +
    "\044\242\045\234\046\247\047\263\050\064\051\244\052" +
    "\102\053\250\054\226\055\231\056\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\015\062\017\103\020" +
    "\063\026\373\027\101\030\077\031\075\032\074\033\072" +
    "\034\071\035\057\036\100\037\070\050\064\052\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\062\017\103\020\063\026\377\027\101\030" +
    "\077\031\075\032\074\033\072\034\071\035\057\036\100" +
    "\037\070\050\064\052\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\015\062\017\103\020\063\026\u0102" +
    "\027\101\030\077\031\075\032\074\033\072\034\071\035" +
    "\057\036\100\037\070\050\064\052\102\001\001\000\002" +
    "\001\001\000\040\015\062\017\103\020\063\026\u0104\027" +
    "\101\030\077\031\075\032\074\033\072\034\071\035\057" +
    "\036\100\037\070\050\064\052\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\062\017\103\020\063\026\u0109\027\101\030" +
    "\077\031\075\032\074\033\072\034\071\035\057\036\100" +
    "\037\070\050\064\052\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\014\261\015\062\017\103\020\063" +
    "\021\u010c\022\251\024\262\025\254\034\237\037\236\040" +
    "\232\041\230\044\242\045\234\046\247\047\263\050\064" +
    "\051\244\052\102\053\250\054\226\055\231\056\224\001" +
    "\001\000\056\014\261\015\062\017\103\020\063\022\320" +
    "\024\262\025\254\034\237\037\236\040\232\041\230\044" +
    "\242\045\234\046\247\047\263\050\064\051\244\052\102" +
    "\053\250\054\226\055\231\056\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\014\261\015\062\017\103" +
    "\020\063\021\u0110\022\251\024\262\025\254\034\237\037" +
    "\236\040\232\041\230\044\242\045\234\046\247\047\263" +
    "\050\064\051\244\052\102\053\250\054\226\055\231\056" +
    "\224\001\001\000\056\014\261\015\062\017\103\020\063" +
    "\022\320\024\262\025\254\034\237\037\236\040\232\041" +
    "\230\044\242\045\234\046\247\047\263\050\064\051\244" +
    "\052\102\053\250\054\226\055\231\056\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\015\062\017\103" +
    "\020\063\026\u0114\027\101\030\077\031\075\032\074\033" +
    "\072\034\071\035\057\036\100\037\070\050\064\052\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\015\062\017\103\020\063\026\u0118\027\101" +
    "\030\077\031\075\032\074\033\072\034\071\035\057\036" +
    "\100\037\070\050\064\052\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\014\261\015\062\017\103\020" +
    "\063\021\u011b\022\251\024\262\025\254\034\237\037\236" +
    "\040\232\041\230\044\242\045\234\046\247\047\263\050" +
    "\064\051\244\052\102\053\250\054\226\055\231\056\224" +
    "\001\001\000\056\014\261\015\062\017\103\020\063\022" +
    "\320\024\262\025\254\034\237\037\236\040\232\041\230" +
    "\044\242\045\234\046\247\047\263\050\064\051\244\052" +
    "\102\053\250\054\226\055\231\056\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\014" +
    "\261\015\062\017\103\020\063\021\u0120\022\251\024\262" +
    "\025\254\034\237\037\236\040\232\041\230\044\242\045" +
    "\234\046\247\047\263\050\064\051\244\052\102\053\250" +
    "\054\226\055\231\056\224\001\001\000\056\014\261\015" +
    "\062\017\103\020\063\022\320\024\262\025\254\034\237" +
    "\037\236\040\232\041\230\044\242\045\234\046\247\047" +
    "\263\050\064\051\244\052\102\053\250\054\226\055\231" +
    "\056\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\u0125\013\u0126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0137\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserG$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserG$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserG$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String nombreArchivo = "";
    /* Reporte de error encontrado. */
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right + 1) + " columna "+ s.left + "Identificador " + s.value + "no reconocido");
    }
   
   /* errores fatales */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null, "Error sintactico en la linea "+ ScannerG.linea + " columna " + ScannerG.columna + " Sym = [" + s.value +", "+s.sym+ "] no reconocido, en archivo: "+nombreArchivo);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserG$actions {
  private final ParserG parser;

  /** Constructor */
  CUP$ParserG$actions(ParserG parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserG$do_action(
    int                        CUP$ParserG$act_num,
    java_cup.runtime.lr_parser CUP$ParserG$parser,
    java.util.Stack            CUP$ParserG$stack,
    int                        CUP$ParserG$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserG$result;

      /* select the action based on the action number */
      switch (CUP$ParserG$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // acceso ::= ID 
            {
              NodoParser RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("acceso","acceso");
			NodoParser n1 = new NodoParser("ID",i1);
			RESULT.AgregarHijo(n1);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("acceso",38, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // acceso ::= acceso PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
			RESULT = a;
			NodoParser n = new NodoParser("PAR1","(");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("acceso",38, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // acceso ::= acceso PAR1 enviados PAR2 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = a;
			RESULT.AgregarHijo(e);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("acceso",38, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // acceso ::= acceso PUNTO ID 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = a;
			NodoParser n = new NodoParser("PUNTO",i);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("acceso",38, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // acceso ::= acceso COR1 exp COR2 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = a;
			NodoParser n = new NodoParser("DIMENSION","DIMENSION");
			n.AgregarHijo(e);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("acceso",38, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // exp9 ::= PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // exp9 ::= MENOS exp9 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("unario","unario");
			RESULT.AgregarHijo(e);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // exp9 ::= columna 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // exp9 ::= acceso 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // exp9 ::= llamadaH 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // exp9 ::= llamada 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exp9 ::= LLAMAR acceso 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exp9 ::= lista 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // exp9 ::= FALSE 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("BOOL","falso");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // exp9 ::= TRUE 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("BOOL","verdadero");
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // exp9 ::= CARACTER 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("CARACTER",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // exp9 ::= DECIMAL 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("DECIMAL",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // exp9 ::= ENTERO 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("ENTERO",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exp9 ::= CADENA 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("CADENA",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp9",29, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exp8 ::= exp9 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp8",26, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exp8 ::= exp8 MENOSMENOS 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENOSMENOS","--");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp8",26, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exp8 ::= exp8 MASMAS 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MASMAS","++");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp8",26, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exp7 ::= exp8 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp7",25, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // exp7 ::= exp7 POT exp8 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("POT","pot");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp7",25, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // exp6 ::= exp7 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp6",24, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exp6 ::= exp6 DIV exp7 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("DIV","/");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp6",24, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exp6 ::= exp6 POR exp7 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("POR","*");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp6",24, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp5 ::= exp6 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp5",23, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp5 ::= exp5 MENOS exp6 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENOS","-");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp5",23, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp5 ::= exp5 MAS exp6 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAS","+");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp5",23, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp4 ::= exp5 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // exp4 ::= exp4 NOIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("NOIGUAL","!=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // exp4 ::= exp4 IGUALIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("IGUALIGUAL","==");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exp4 ::= exp4 MENORIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENORIGUAL","<=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exp4 ::= exp4 MAYORIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAYORIGUAL",">=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exp4 ::= exp4 MENOR exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENOR","<");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exp4 ::= exp4 MAYOR exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAYOR",">");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp4",22, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exp31 ::= exp4 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp31",28, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // exp31 ::= NOT exp4 
            {
              NodoParser RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("NOT","!");
			RESULT.AgregarHijo(e2);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp31",28, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp3 ::= exp31 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp3",21, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp3 ::= exp3 AND exp31 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("AND","&&");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp3",21, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exp21 ::= exp3 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp21",27, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exp21 ::= exp21 XOR exp3 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("XOR","&|");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp21",27, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exp ::= exp21 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exp ::= exp OR exp21 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("OR","||");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("exp",20, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // grafica ::= GRAPHIKAR_FUNCION PAR1 exp COMA exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("grafica","grafica");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("grafica",37, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // hacer ::= HACER LLA1 sentencias LLA2 MIENTRAS PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("hacer","hacer");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("hacer",36, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-7)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // mientras ::= MIENTRAS PAR1 exp PAR2 LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("mientras","mientras");
				RESULT.AgregarHijo(e);
				RESULT.AgregarHijo(s);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("mientras",35, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // para ::= PARA PAR1 asignacion DOSPUNTOS exp DOSPUNTOS exp PAR2 LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("para","para");
			RESULT.AgregarHijo(a);
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(e2);
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("para",34, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-10)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // para ::= PARA PAR1 VAR tipo ID IGUAL exp DOSPUNTOS exp DOSPUNTOS exp PAR2 LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-11)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-8)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("para","para");
			NodoParser d = new NodoParser("declaracion","declaracion");
			d.AgregarHijo(t);
			NodoParser var = new NodoParser("variable","variable");
			NodoParser id = new NodoParser("ID",i);
			var.AgregarHijo(id);
			var.AgregarHijo(e);
			d.AgregarHijo(var);
			RESULT.AgregarHijo(d);
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(e2);
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("para",34, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-14)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // caso ::= DEFECTO DOSPUNTOS sentencias 
            {
              NodoParser RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("caso","caso");
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("caso",33, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // caso ::= CASO exp DOSPUNTOS sentencias 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("caso","caso");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("caso",33, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // casos ::= caso 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("casos","casos");
			RESULT.AgregarHijo(c);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("casos",32, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // casos ::= casos caso 
            {
              NodoParser RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser c1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser c2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = c1;
			RESULT.AgregarHijo(c2);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("casos",32, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // seleccion ::= SELECCION PAR1 exp PAR2 LLA1 casos LLA2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("seleccion","seleccion");
				RESULT.AgregarHijo(e);
				RESULT.AgregarHijo(c);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("seleccion",31, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // si ::= SI PAR1 exp PAR2 LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
		RESULT = new NodoParser("si","si");
		RESULT.AgregarHijo(e);
		RESULT.AgregarHijo(s);
		
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("si",30, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // si ::= si SINO LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser s1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
		RESULT = s1;
		RESULT.AgregarHijo(s2);
		
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("si",30, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // retornar ::= RETORNAR exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("retornar","retornar");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("retornar",19, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // asignacion ::= exp9 IGUAL NUEVO ID PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("asignacion","asignacion");
				NodoParser nu = new NodoParser("NUEVO",i2);
				RESULT.AgregarHijo(i);
				RESULT.AgregarHijo(nu);
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // asignacion ::= exp9 IGUAL NUEVO ID PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = new NodoParser("asignacion","asignacion");
				NodoParser nu = new NodoParser("NUEVO",i2);
				RESULT.AgregarHijo(i);
				RESULT.AgregarHijo(nu);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // asignacion ::= exp9 IGUAL exp 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("asignacion","asignacion");
				RESULT.AgregarHijo(i);
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("asignacion",18, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // imprimir ::= IMPRIMIRK PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("imprimir","imprimir");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("imprimir",44, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // dondeTodo ::= DONDETODO PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("dondeTodo","dondeTodo");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("dondeTodo",43, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // dondeCada ::= DONDECADA PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("dondeCada","dondeCada");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("dondeCada",42, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // donde ::= DONDE PAR1 exp PAR2 IGUAL exp 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("donde","donde");
				RESULT.AgregarHijo(e1);
				RESULT.AgregarHijo(e2);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("donde",41, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // procesar ::= PROCESAR IGUAL exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("procesar","procesar");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("procesar",39, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // columna ::= COLUMNA PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("columna","columna");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("columna",40, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia ::= exp8 PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia ::= TERMINAR PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		
				RESULT = new NodoParser("TERMINAR","TERMINAR");
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia ::= CONTINUAR PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		
				RESULT = new NodoParser("CONTINUAR","CONTINUAR");
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencia ::= hacer 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sentencia ::= mientras 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia ::= para 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia ::= seleccion 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia ::= si 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia ::= imprimir PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia ::= dondeTodo PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia ::= dondeCada PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia ::= donde PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentencia ::= procesar PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia ::= grafica PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentencia ::= retornar PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentencia ::= asignacion PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentencia ::= declaracion PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = e;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencia",16, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencias ::= sentencia 
            {
              NodoParser RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("sentencias","sentencias");
				RESULT.AgregarHijo(s);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencias",15, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencias ::= sentencias sentencia 
            {
              NodoParser RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser s2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = s1;
				RESULT.AgregarHijo(s2);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("sentencias",15, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // enviados ::= exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("enviados","enviados");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("enviados",17, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // enviados ::= enviados COMA exp 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = e1;
				RESULT.AgregarHijo(e2);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("enviados",17, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // llamadaH ::= LLAMARHK ID PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = new NodoParser("llamadaH","llamadaH");
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("llamadaH",14, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // llamadaH ::= LLAMARHK ID PAR1 enviados PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("llamadaH","llamadaH");
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("llamadaH",14, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // llamada ::= ID PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = new NodoParser("llamada","llamada");
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("llamada",13, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // llamada ::= ID PAR1 enviados PAR2 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("llamada","llamada");
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("llamada",13, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // listaExp ::= exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = new NodoParser("listaExp","listaExp");
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("listaExp",12, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // listaExp ::= listaExp COMA exp 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = e1;
				RESULT.AgregarHijo(e2);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("listaExp",12, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // lista ::= LLA1 listaExp LLA2 
            {
              NodoParser RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser l = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = l;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("lista",11, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable ::= ID 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT =  new NodoParser("variable","variable");
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable ::= variable DOSPUNTOS visibilidad 
            {
              NodoParser RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser vi = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = v;
				RESULT.AgregarHijo(vi);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable ::= variable IGUAL NUEVO ID PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = v;
				NodoParser nu = new NodoParser("NUEVO","NUEVO");
				RESULT.AgregarHijo(nu);
				NodoParser n = new NodoParser("ID",i);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable ::= variable IGUAL NUEVO ID PAR1 enviados PAR2 
            {
              NodoParser RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = v;
				NodoParser nu = new NodoParser("NUEVO",i);
				RESULT.AgregarHijo(nu);
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-6)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variable ::= variable IGUAL exp 
            {
              NodoParser RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				RESULT = v;
				RESULT.AgregarHijo(e);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= variable COR1 exp COR2 
            {
              NodoParser RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = v;
				NodoParser nu = new NodoParser("DIMENSION","DIMENSION");
				nu.AgregarHijo(e);
				RESULT.AgregarHijo(nu);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("variable",46, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracion ::= VAR tipo variable 
            {
              NodoParser RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
					RESULT = new NodoParser("declaracion","declaracion");
					RESULT.AgregarHijo(t);
					RESULT.AgregarHijo(v);
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracion ::= declaracion COMA variable 
            {
              NodoParser RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser d = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
					RESULT = d;
					RESULT.AgregarHijo(v);
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= tipo ID 
            {
              NodoParser RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
					RESULT = new NodoParser("parametros","parametros");
					NodoParser n = new NodoParser("ID",i);
					RESULT.AgregarHijo(t);
					RESULT.AgregarHijo(n);
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametros COR1 COR2 
            {
              NodoParser RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser p = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
					RESULT = p;
					NodoParser n = new NodoParser("[","[");
					RESULT.AgregarHijo(n);
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametros COMA tipo ID 
            {
              NodoParser RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser p = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
					RESULT = p;
					NodoParser n = new NodoParser("ID",i);
					RESULT.AgregarHijo(t);
					RESULT.AgregarHijo(n);
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // funcion ::= tipo ID PAR1 PAR2 
            {
              NodoParser RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
			RESULT = new NodoParser("funcion","funcion");
			NodoParser n = new NodoParser("ID",i);
			RESULT.AgregarHijo(t);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion ::= tipo ID PAR1 parametros PAR2 
            {
              NodoParser RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser t = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser p = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("funcion","funcion");
			NodoParser n = new NodoParser("ID",i);
			RESULT.AgregarHijo(t);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(p);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcion ::= funcion LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser f = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = f;
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion ::= funcion DOSPUNTOS visibilidad LLA1 sentencias LLA2 
            {
              NodoParser RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).right;
		NodoParser f = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = f;
			RESULT.AgregarHijo(v);
			RESULT.AgregarHijo(s);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("funcion",8, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-5)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // visibilidad ::= PRIVADO 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("VISIBILIDAD","privado");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // visibilidad ::= PROTEGIDO 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("VISIBILIDAD","protegido");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // visibilidad ::= PUBLICO 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("VISIBILIDAD","publico");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("visibilidad",7, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= ID 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("ID",i);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= VACIO 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("TIPO","vacio");
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= ALS 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","als");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= BOOL 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","bool");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= CADENA 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","cadena");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= CARACTER 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","caracter");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= DECIMAL 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","decimal");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= ENTERO 
            {
              NodoParser RESULT =null;
		
					RESULT = new NodoParser("TIPO","entero");
					
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codigoClase ::= funcion 
            {
              NodoParser RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser f = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("codigoClase","codigoClase");
			RESULT.AgregarHijo(f);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("codigoClase",5, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // codigoClase ::= declaracion PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser d = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = new NodoParser("codigoClase","codigoClase");
			RESULT.AgregarHijo(d);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("codigoClase",5, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigoClase ::= codigoClase funcion 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser f = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = c;
			RESULT.AgregarHijo(f);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("codigoClase",5, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigoClase ::= codigoClase declaracion PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser d = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = c;
			RESULT.AgregarHijo(d);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("codigoClase",5, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // als ::= ALS ID 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("ALS","ALS");
			NodoParser n = new NodoParser("ID",i);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("als",4, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // als ::= als LLA1 codigoClase LLA2 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
			RESULT = a;
			RESULT.AgregarHijo(c);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("als",4, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // als ::= als HEREDA ID 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = a;
			NodoParser n = new NodoParser("HEREDA",i);
			RESULT.AgregarHijo(n);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("als",4, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // als ::= als DOSPUNTOS visibilidad 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser v = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = a;
			RESULT.AgregarHijo(v);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("als",4, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clases ::= als 
            {
              NodoParser RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("clases","clases");
			RESULT.AgregarHijo(a);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("clases",3, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clases ::= clases als 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser a = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = c;
			RESULT.AgregarHijo(a);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("clases",3, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // imporHash ::= INCLUIR_HK ID PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = new NodoParser("imporHash","imporHash");
				NodoParser n = new NodoParser("ID",id);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("imporHash",2, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // imporHash ::= imporHash INCLUIR_HK ID PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		
				RESULT = i;
				NodoParser n = new NodoParser("ID",id);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("imporHash",2, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // imporGra ::= IMPORTAR ID PGK PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = new NodoParser("imporGra","imporGra");
				NodoParser n = new NodoParser("ID",id);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("imporGra",1, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-3)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // imporGra ::= imporGra IMPORTAR ID PGK PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-2)).value;
		
				RESULT = i;
				NodoParser n = new NodoParser("ID",id);
				RESULT.AgregarHijo(n);
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("imporGra",1, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-4)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= clases 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("inicio","inicio");
			RESULT.AgregarHijo(c);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= imporHash 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("inicio","inicio");
			RESULT.AgregarHijo(i);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= imporGra 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = new NodoParser("inicio","inicio");
			RESULT.AgregarHijo(i);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= cuerpo clases 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			RESULT.AgregarHijo(c);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= cuerpo imporHash 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			RESULT.AgregarHijo(i);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= cuerpo imporGra 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
			RESULT = e;
			RESULT.AgregarHijo(i);
			
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("cuerpo",45, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= NT$0 cuerpo 
            {
              NodoParser RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (NodoParser) ((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.peek()).value;
		
				System.out.println("Compilacion graphik exitosa!!! XD");
				Analizador.raiz = c;
				
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              NodoParser RESULT =null;
ScannerG.linea = 1; ScannerG.columna = 0;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("NT$0",47, ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          return CUP$ParserG$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).right;
		NodoParser start_val = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)).value;
		RESULT = start_val;
              CUP$ParserG$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserG$stack.elementAt(CUP$ParserG$top-1)), ((java_cup.runtime.Symbol)CUP$ParserG$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserG$parser.done_parsing();
          return CUP$ParserG$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

