/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package Compilador.Graphik;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.io.Reader;
import java.awt.Color;
import javax.swing.JOptionPane;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>FlexYCup/LexicoG.jflex</tt>
 */
public class ScannerG implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO1 = 2;
  public static final int COMENTARIO2 = 4;
  public static final int CADENA = 6;
  public static final int CARACTER = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 52,  2,  4,  4,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 40, 54, 53,  0,  0, 42, 55, 47, 48, 34, 32, 49, 33,  6, 35, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5, 51,  0, 38, 39, 37, 50, 
     0, 19, 21, 15, 14,  9, 25, 28, 29, 17,  7, 31, 20, 18, 10, 13, 
    26,  7, 12, 23, 11, 27, 24,  7,  7,  7,  7, 43,  0, 44, 36,  8, 
     0, 19, 21, 15, 14,  9, 25, 28, 29, 17,  7, 31, 20, 18, 10, 13, 
    26,  7, 12, 23, 11, 27, 24,  7,  7,  7,  7, 45, 41, 46,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\5\7\6\1\1"+
    "\5\6\1\1\6\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\1\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\1\1\40\1\41"+
    "\1\37\1\42\2\0\10\6\2\0\2\6\1\0\4\6"+
    "\1\0\1\43\1\6\1\43\11\6\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\13\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\61\2\6\2\0\3\6\1\62\3\6\1\0"+
    "\12\6\1\0\7\6\2\63\3\0\3\6\1\0\2\6"+
    "\1\64\1\0\1\65\1\6\1\65\1\6\1\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\66\5\6\1\67\1\0"+
    "\2\6\1\0\2\6\1\70\1\0\4\6\3\0\3\6"+
    "\1\0\2\6\1\0\2\6\2\71\2\72\2\6\1\0"+
    "\1\6\1\0\3\6\1\73\1\74\1\0\2\6\1\0"+
    "\4\6\1\0\3\6\1\75\3\0\3\6\1\0\1\6"+
    "\1\76\1\0\3\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\77\1\0\2\6\2\100\1\101"+
    "\2\6\1\0\1\6\1\102\1\6\3\0\3\6\1\0"+
    "\2\6\1\0\2\6\1\0\1\6\1\0\1\6\2\103"+
    "\2\104\1\0\1\6\2\105\1\106\2\6\1\0\1\6"+
    "\1\107\1\0\1\110\1\111\1\6\1\110\1\111\2\112"+
    "\2\113\1\0\2\6\1\0\1\6\2\114\1\0\1\6"+
    "\1\115\1\116\2\117\1\0\1\6\2\120\1\121\2\122"+
    "\1\0\1\6\2\123\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\2\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0118"+
    "\0\u0118\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u0118\0\u0118\0\u0118\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0818\0\u0118\0\u0118\0\u0850"+
    "\0\u0118\0\u0888\0\u08c0\0\u0118\0\u0118\0\u0118\0\u0118\0\u08f8"+
    "\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8"+
    "\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78"+
    "\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0118"+
    "\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118\0\u0118"+
    "\0\u0118\0\u0118\0\u08f8\0\u0118\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260"+
    "\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u0118"+
    "\0\u01f8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u01f8\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8"+
    "\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8"+
    "\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u0118"+
    "\0\u01f8\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u01f8\0\u1c70\0\u0118\0\u1ca8\0\u01f8\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u01f8\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u01f8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0"+
    "\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u0118"+
    "\0\u01f8\0\u0118\0\u01f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u01f8\0\u01f8\0\u26f0\0\u2728\0\u2760"+
    "\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920"+
    "\0\u2958\0\u01f8\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8"+
    "\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68"+
    "\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u01f8"+
    "\0\u2e28\0\u2e60\0\u2e98\0\u0118\0\u01f8\0\u01f8\0\u2ed0\0\u2f08"+
    "\0\u2f40\0\u2f78\0\u01f8\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090"+
    "\0\u30c8\0\u3100\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250"+
    "\0\u3288\0\u32c0\0\u32f8\0\u3330\0\u0118\0\u01f8\0\u0118\0\u01f8"+
    "\0\u3368\0\u33a0\0\u0118\0\u01f8\0\u01f8\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u01f8\0\u34b8\0\u0118\0\u0118\0\u34f0\0\u01f8\0\u01f8"+
    "\0\u0118\0\u01f8\0\u0118\0\u01f8\0\u3528\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u0118\0\u01f8\0\u3640\0\u3678\0\u01f8\0\u01f8\0\u0118"+
    "\0\u01f8\0\u36b0\0\u36e8\0\u0118\0\u01f8\0\u01f8\0\u0118\0\u01f8"+
    "\0\u3720\0\u3758\0\u0118\0\u01f8\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8"+
    "\0\u3a30\0\u3a68\0\u0118\0\u01f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\6\1\15\1\16\1\17\1\20\1\14\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\14\1\36\1\37\1\6\1\14"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\2\70\1\71\65\70\43\72\1\73\21\72\1\6\2\72"+
    "\66\74\1\75\1\74\67\76\1\77\72\0\1\10\72\0"+
    "\1\12\1\100\115\0\1\101\40\0\1\14\1\0\11\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\3\14\1\102\5\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\0\5\14"+
    "\1\0\4\14\1\103\2\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\104\6\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\2\14\1\105\6\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\106\3\14\1\107\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\6\14"+
    "\1\110\2\14\1\0\2\14\1\111\2\14\1\0\7\14"+
    "\1\0\1\14\42\0\1\112\7\0\1\113\52\0\1\14"+
    "\1\0\3\14\1\114\5\14\1\0\1\14\1\115\3\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\116\1\117\4\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\3\14\1\120\1\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\11\14\1\0"+
    "\3\14\1\121\1\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\6\14\1\122\2\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\41\0\1\123\6\0\2\124\53\0"+
    "\1\14\1\0\2\14\1\125\6\14\1\124\1\126\4\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\2\14"+
    "\1\127\6\14\1\0\2\14\1\130\2\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\131\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\5\14\1\132\3\14\1\0\2\14\1\133\2\14"+
    "\1\0\4\14\1\134\2\14\1\0\1\14\35\0\1\14"+
    "\1\0\5\14\1\135\3\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\2\14\1\136\6\14"+
    "\1\0\2\14\1\137\2\14\1\0\7\14\1\0\1\14"+
    "\70\0\1\140\70\0\1\141\75\0\1\142\67\0\1\143"+
    "\67\0\1\144\67\0\1\145\71\0\1\146\67\0\1\147"+
    "\1\150\60\0\1\151\24\0\2\70\1\0\65\70\43\72"+
    "\1\0\21\72\1\0\2\72\65\0\1\152\7\0\1\153"+
    "\120\0\2\154\35\0\1\14\1\0\4\14\1\155\4\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\156\6\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\5\14\1\157\3\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\4\14\1\160\4\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\10\14\1\161\1\0"+
    "\5\14\1\0\2\14\1\162\4\14\1\0\1\14\35\0"+
    "\1\14\1\0\3\14\1\163\5\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\3\14\1\164"+
    "\5\14\1\0\3\14\1\165\1\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\5\14\1\166\1\14\1\167"+
    "\1\14\1\0\5\14\1\170\1\171\6\14\1\0\1\14"+
    "\47\0\1\172\102\0\1\173\42\0\1\14\1\0\10\14"+
    "\1\174\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\5\14\1\0\3\14\1\175"+
    "\3\14\1\0\1\14\41\0\1\176\63\0\1\14\1\0"+
    "\2\14\1\177\6\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\5\14\1\200"+
    "\1\201\6\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\0\2\14\1\202\2\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\6\14\1\203\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\54\0\1\204\55\0\1\205"+
    "\62\0\1\14\1\0\11\14\1\0\3\14\1\206\1\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\3\14"+
    "\1\207\5\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\5\14\1\210\3\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\5\14"+
    "\1\211\2\14\1\212\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\3\14\1\213"+
    "\1\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\6\14\1\214\2\14\1\215\1\216\4\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\5\14\1\217\3\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\11\14\1\0\4\14\1\220\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\2\14\1\221"+
    "\2\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\5\14\1\222\3\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\10\14\1\223\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\2\14"+
    "\1\224\6\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\11\14\1\0\5\14\1\0\1\14"+
    "\1\225\5\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\0\1\14\1\226\3\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\6\14\1\227\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\230\1\231\4\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\2\14\1\232\6\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\7\14\1\233"+
    "\1\14\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\4\14\1\234\4\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\11\14\1\0"+
    "\5\14\1\0\4\14\1\235\2\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\2\14\1\236\2\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\2\14\1\237"+
    "\6\14\1\0\5\14\1\0\7\14\1\0\1\14\45\0"+
    "\1\240\57\0\1\14\1\0\6\14\1\241\2\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\54\0\1\242\57\0"+
    "\1\243\1\244\57\0\1\14\1\0\11\14\1\0\3\14"+
    "\1\245\1\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\5\14\1\246\1\247\2\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\42\0\1\250\62\0\1\14\1\0"+
    "\3\14\1\251\5\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\1\14\1\252"+
    "\3\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\11\14\1\0\3\14\1\253\1\14\1\0\7\14\1\0"+
    "\1\14\41\0\1\254\73\0\1\255\57\0\1\14\1\0"+
    "\2\14\1\256\6\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\6\14\1\257\2\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\7\14\1\260\1\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\261\1\262\4\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\0\5\14\1\263\1\264\6\14\1\0\1\14\35\0"+
    "\1\14\1\0\4\14\1\265\3\14\1\266\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\60\0\1\267\44\0\1\14"+
    "\1\0\11\14\1\0\5\14\1\0\1\14\1\270\5\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\271\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\11\14\1\0\3\14\1\272\1\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\0\5\14"+
    "\1\0\3\14\1\273\3\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\274\6\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\2\14\1\275\6\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\5\14\1\276\3\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\6\14\1\277\2\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\11\14\1\300\1\301\4\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\5\14\1\302\3\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\52\0\1\303\52\0"+
    "\1\14\1\0\11\14\1\0\1\14\1\304\3\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\10\14\1\305"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\306\6\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\307\1\310"+
    "\4\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\11\14\1\0\1\14\1\311\3\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\10\14\1\312\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\3\14"+
    "\1\313\5\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\63\0\1\314\54\0\2\315\62\0\1\316\60\0\1\14"+
    "\1\0\11\14\1\0\5\14\1\0\4\14\1\317\2\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\315\1\320"+
    "\4\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\5\14\1\321\3\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\43\0\1\322\61\0\1\14\1\0\4\14\1\323"+
    "\4\14\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\2\14\1\324\2\14\1\0"+
    "\7\14\1\0\1\14\47\0\1\325\55\0\1\14\1\0"+
    "\10\14\1\326\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\11\14\1\0\2\14\1\327\2\14"+
    "\1\0\7\14\1\0\1\14\45\0\1\330\57\0\1\14"+
    "\1\0\6\14\1\331\2\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\45\0\1\332\57\0\1\14\1\0\6\14"+
    "\1\333\2\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\2\14\1\334\6\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\2\14"+
    "\1\335\6\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\53\0\1\336\51\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\337\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\11\14\1\340\1\341\4\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\5\14\1\0"+
    "\6\14\1\342\1\0\1\14\35\0\1\14\1\0\7\14"+
    "\1\343\1\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\5\14\1\344\3\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\6\14"+
    "\1\345\2\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\42\0\1\346\62\0\1\14\1\0\3\14\1\347\5\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\3\14\1\350\5\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\53\0\1\351\51\0\1\14\1\0\11\14"+
    "\1\0\2\14\1\352\2\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\4\14\1\353\4\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\4\14"+
    "\1\354\3\14\1\355\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\42\0\1\356\62\0\1\14\1\0\3\14\1\357"+
    "\5\14\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\3\14\1\360\5\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\4\14\1\361"+
    "\4\14\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\2\14\1\362\2\14\1\0"+
    "\7\14\1\0\1\14\50\0\2\363\70\0\1\364\60\0"+
    "\1\365\61\0\1\14\1\0\11\14\1\363\1\366\4\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\0\1\14\1\367\3\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\4\14\1\370\4\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\44\0\1\371\60\0\1\14"+
    "\1\0\5\14\1\372\3\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\35\0\1\14\1\0\5\14\1\373\3\14"+
    "\1\0\5\14\1\0\7\14\1\0\1\14\47\0\1\374"+
    "\55\0\1\14\1\0\10\14\1\375\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\7\14\1\376"+
    "\1\14\1\0\5\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\5\14\1\0\5\14\1\377"+
    "\1\14\1\0\1\14\35\0\1\14\1\0\11\14\1\0"+
    "\5\14\1\u0100\1\u0101\6\14\1\0\1\14\46\0\1\u0102"+
    "\56\0\1\14\1\0\7\14\1\u0103\1\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\47\0\1\u0104\55\0\1\14"+
    "\1\0\10\14\1\u0105\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\u0106\1\u0107\4\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\0\2\14\1\u0108\2\14\1\0\7\14\1\0\1\14"+
    "\53\0\1\u0109\51\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\u010a\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\11\14\1\0\2\14\1\u010b\2\14\1\0\7\14"+
    "\1\0\1\14\54\0\1\u010c\50\0\1\14\1\0\11\14"+
    "\1\0\3\14\1\u010d\1\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\6\14\1\u010e\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\6\14"+
    "\1\u010f\2\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\11\14\1\0\2\14\1\u0110\2\14"+
    "\1\0\7\14\1\0\1\14\63\0\1\u0111\41\0\1\14"+
    "\1\0\11\14\1\0\5\14\1\0\4\14\1\u0112\2\14"+
    "\1\0\1\14\35\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\u0113\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\2\14\1\u0114\6\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\44\0\1\u0115\73\0\2\u0116\71\0\1\u0117"+
    "\51\0\1\14\1\0\5\14\1\u0118\3\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\11\14"+
    "\1\u0116\1\u0119\4\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\11\14\1\0\2\14\1\u011a\2\14\1\0"+
    "\7\14\1\0\1\14\53\0\1\u011b\51\0\1\14\1\0"+
    "\11\14\1\0\2\14\1\u011c\2\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\5\14\1\0"+
    "\6\14\1\u011d\1\0\1\14\50\0\2\u011e\53\0\1\14"+
    "\1\0\11\14\1\u011e\1\u011f\4\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\2\14\1\u0120\6\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\35\0\1\14\1\0"+
    "\11\14\1\u0121\1\u0122\4\14\1\0\7\14\1\0\1\14"+
    "\53\0\1\u0123\51\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\u0124\2\14\1\0\7\14\1\0\1\14\45\0\1\u0125"+
    "\57\0\1\14\1\0\6\14\1\u0126\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\45\0\1\u0127\57\0\1\14"+
    "\1\0\6\14\1\u0128\2\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\66\0\2\u0129\35\0\1\14\1\0\11\14"+
    "\1\0\5\14\1\0\7\14\1\u0129\1\u012a\44\0\1\u012b"+
    "\60\0\1\14\1\0\5\14\1\u012c\3\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\5\14"+
    "\1\u012d\3\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\7\14\1\u012e\1\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\7\14"+
    "\1\u012f\1\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\53\0\1\u0130\51\0\1\14\1\0\11\14\1\0\2\14"+
    "\1\u0131\2\14\1\0\7\14\1\0\1\14\35\0\1\14"+
    "\1\0\5\14\1\u0132\3\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\40\0\1\u0133\73\0\1\u0134\67\0\1\u0135"+
    "\60\0\1\14\1\0\1\14\1\u0136\7\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\35\0\1\14\1\0\5\14"+
    "\1\u0137\3\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\5\14\1\u0138\3\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\56\0\2\u0139\45\0\1\14"+
    "\1\0\11\14\1\0\5\14\1\u0139\1\u013a\6\14\1\0"+
    "\1\14\35\0\1\14\1\0\11\14\1\0\5\14\1\0"+
    "\7\14\1\u013b\1\u013c\45\0\1\u013d\57\0\1\14\1\0"+
    "\6\14\1\u013e\2\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\35\0\1\14\1\0\5\14\1\u013f\3\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\46\0\1\u0140\56\0"+
    "\1\14\1\0\7\14\1\u0141\1\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\44\0\1\u0142\60\0\1\14\1\0"+
    "\5\14\1\u0143\3\14\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\53\0\1\u0144\51\0\1\14\1\0\11\14\1\0"+
    "\2\14\1\u0145\2\14\1\0\7\14\1\0\1\14\35\0"+
    "\1\14\1\0\6\14\1\u0146\2\14\1\0\5\14\1\0"+
    "\7\14\1\0\1\14\35\0\1\14\1\0\11\14\1\0"+
    "\2\14\1\u0147\2\14\1\0\7\14\1\0\1\14\44\0"+
    "\1\u0148\60\0\1\14\1\0\5\14\1\u0149\3\14\1\0"+
    "\5\14\1\0\7\14\1\0\1\14\65\0\1\u014a\37\0"+
    "\1\14\1\0\11\14\1\0\5\14\1\0\6\14\1\u014b"+
    "\1\0\1\14\42\0\1\u014c\62\0\1\14\1\0\3\14"+
    "\1\u014d\5\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\35\0\1\14\1\0\6\14\1\u014e\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\45\0\1\u014f\57\0\1\14"+
    "\1\0\6\14\1\u0150\2\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\44\0\1\u0151\60\0\1\14\1\0\5\14"+
    "\1\u0152\3\14\1\0\5\14\1\0\7\14\1\0\1\14"+
    "\66\0\2\u0153\35\0\1\14\1\0\11\14\1\0\5\14"+
    "\1\0\7\14\1\u0153\1\u0154\40\0\1\u0155\64\0\1\14"+
    "\1\0\1\14\1\u0156\7\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\61\0\1\u0157\43\0\1\14\1\0\11\14"+
    "\1\0\5\14\1\0\2\14\1\u0158\4\14\1\0\1\14"+
    "\63\0\1\u0159\41\0\1\14\1\0\11\14\1\0\5\14"+
    "\1\0\4\14\1\u015a\2\14\1\0\1\14\42\0\1\u015b"+
    "\62\0\1\14\1\0\3\14\1\u015c\5\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\47\0\1\u015d\55\0\1\14"+
    "\1\0\10\14\1\u015e\1\0\5\14\1\0\7\14\1\0"+
    "\1\14\50\0\2\u015f\53\0\1\14\1\0\11\14\1\u015f"+
    "\1\u0160\4\14\1\0\7\14\1\0\1\14\45\0\1\u0161"+
    "\57\0\1\14\1\0\6\14\1\u0162\2\14\1\0\5\14"+
    "\1\0\7\14\1\0\1\14\42\0\1\u0163\62\0\1\14"+
    "\1\0\3\14\1\u0164\5\14\1\0\5\14\1\0\7\14"+
    "\1\0\1\14\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\2\11\30\1\3\11\6\1\12\11"+
    "\1\1\2\11\1\1\1\11\2\1\4\11\2\0\10\1"+
    "\2\0\2\1\1\0\4\1\1\0\14\1\13\11\1\1"+
    "\1\11\13\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\11\3\1\2\0\7\1\1\0\12\1\1\0\7\1"+
    "\1\11\1\1\3\0\3\1\1\0\3\1\1\0\1\11"+
    "\3\1\1\0\1\1\1\0\3\1\1\0\10\1\1\0"+
    "\2\1\1\0\3\1\1\0\4\1\3\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\11\3\1\1\0"+
    "\1\1\1\0\5\1\1\0\2\1\1\0\4\1\1\0"+
    "\4\1\3\0\3\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\11\4\1\1\0\3\1\3\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\4\1\1\0"+
    "\2\1\1\0\2\11\3\1\1\11\1\1\1\11\1\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[356];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    String cadena="";
    public static int linea = 0;
    public static int columna = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerG(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ScannerG(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { String errLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(linea+1)+" y columna: "+yycolumn;
        System.err.println(errLex);
          }
        case 85: break;
        case 2: 
          { columna = 0; linea += 1;
          }
        case 86: break;
        case 3: 
          { columna += 1;
          }
        case 87: break;
        case 4: 
          { columna += new String(yytext()).length();return new Symbol(symG.ENTERO,columna, linea, new String(yytext()));
          }
        case 88: break;
        case 5: 
          { columna += 1;return new Symbol(symG.PUNTO,columna,linea,".");
          }
        case 89: break;
        case 6: 
          { columna += new String(yytext()).length();return new Symbol(symG.ID,columna, linea, new String(yytext()));
          }
        case 90: break;
        case 7: 
          { columna += 1;return new Symbol(symG.MAS,columna,linea,"+");
          }
        case 91: break;
        case 8: 
          { columna += 1;return new Symbol(symG.MENOS,columna,linea,"-");
          }
        case 92: break;
        case 9: 
          { columna += 1;return new Symbol(symG.POR,columna,linea,"*");
          }
        case 93: break;
        case 10: 
          { columna += 1;return new Symbol(symG.DIV,columna,linea,"/");
          }
        case 94: break;
        case 11: 
          { columna += 1;return new Symbol(symG.POT,columna,linea,"^");
          }
        case 95: break;
        case 12: 
          { columna += 1;return new Symbol(symG.MAYOR,columna,linea,">");
          }
        case 96: break;
        case 13: 
          { columna += 1;return new Symbol(symG.MENOR,columna,linea,"<");
          }
        case 97: break;
        case 14: 
          { columna += 1;return new Symbol(symG.IGUAL,columna,linea,"=");
          }
        case 98: break;
        case 15: 
          { columna += 1;return new Symbol(symG.NOT,columna,linea,"!");
          }
        case 99: break;
        case 16: 
          { columna += 1;return new Symbol(symG.COR1,columna,linea,"[");
          }
        case 100: break;
        case 17: 
          { columna += 1;return new Symbol(symG.COR2,columna,linea,"]");
          }
        case 101: break;
        case 18: 
          { columna += 1;return new Symbol(symG.LLA1,columna,linea,"{");
          }
        case 102: break;
        case 19: 
          { columna += 1;return new Symbol(symG.LLA2,columna,linea,"}");
          }
        case 103: break;
        case 20: 
          { columna += 1;return new Symbol(symG.PAR1,columna,linea,"(");
          }
        case 104: break;
        case 21: 
          { columna += 1;return new Symbol(symG.PAR2,columna,linea,")");
          }
        case 105: break;
        case 22: 
          { columna += 1;return new Symbol(symG.COMA,columna,linea,",");
          }
        case 106: break;
        case 23: 
          { columna += 1;return new Symbol(symG.PUNTOYCOMA,columna,linea,"?");
          }
        case 107: break;
        case 24: 
          { columna += 1;return new Symbol(symG.DOSPUNTOS,columna,linea,":");
          }
        case 108: break;
        case 25: 
          { columna += 4;
          }
        case 109: break;
        case 26: 
          { cadena = "";yybegin(COMENTARIO1);
          }
        case 110: break;
        case 27: 
          { cadena = ""; yybegin(CADENA);
          }
        case 111: break;
        case 28: 
          { cadena = ""; yybegin(CARACTER);
          }
        case 112: break;
        case 29: 
          { /**/
          }
        case 113: break;
        case 30: 
          { columna = 0; linea += 1; yybegin(YYINITIAL);
          }
        case 114: break;
        case 31: 
          { cadena += yytext();
          }
        case 115: break;
        case 32: 
          { cadena+=yytext();
          }
        case 116: break;
        case 33: 
          { String temporal=cadena; cadena=""; yybegin(YYINITIAL);columna += temporal.length()+2;return new Symbol(symG.CADENA,columna,linea, temporal);
          }
        case 117: break;
        case 34: 
          { String temporal = cadena; cadena = ""; yybegin(YYINITIAL);columna += 3;return new  Symbol(symG.CARACTER,columna,linea,temporal);
          }
        case 118: break;
        case 35: 
          { columna += 2;return new Symbol(symG.SI,columna,linea,"SI");
          }
        case 119: break;
        case 36: 
          { columna += 2;return new Symbol(symG.MASMAS,columna,linea,"++");
          }
        case 120: break;
        case 37: 
          { columna += 2;return new Symbol(symG.MENOSMENOS,columna,linea,"--");
          }
        case 121: break;
        case 38: 
          { columna += 2;return new Symbol(symG.MAYORIGUAL,columna,linea,">=");
          }
        case 122: break;
        case 39: 
          { columna += 2;return new Symbol(symG.MENORIGUAL,columna,linea,"<=");
          }
        case 123: break;
        case 40: 
          { columna += 2;return new Symbol(symG.IGUALIGUAL,columna,linea,"==");
          }
        case 124: break;
        case 41: 
          { columna += 2;return new Symbol(symG.NOIGUAL,columna,linea,"!=");
          }
        case 125: break;
        case 42: 
          { columna += 2;return new Symbol(symG.OR,columna,linea,"||");
          }
        case 126: break;
        case 43: 
          { columna += 2;return new Symbol(symG.XOR,columna,linea,"&|");
          }
        case 127: break;
        case 44: 
          { columna += 2;return new Symbol(symG.AND,columna,linea,"&&");
          }
        case 128: break;
        case 45: 
          { cadena = "";yybegin(COMENTARIO2);
          }
        case 129: break;
        case 46: 
          { int x = cadena.length();
            for(int i = 0;i<x;i++){
                if(cadena.charAt(i) == '\n'){
                    linea += 1; 
                }
            }
			yybegin(YYINITIAL);
          }
        case 130: break;
        case 47: 
          { columna += new String(yytext()).length();return new Symbol(symG.DECIMAL,columna, linea, new String(yytext()));
          }
        case 131: break;
        case 48: 
          { columna += 3;return new Symbol(symG.PGK,columna,linea,".GK");
          }
        case 132: break;
        case 49: 
          { columna += 3;return new Symbol(symG.ALS,columna,linea,"ALS");
          }
        case 133: break;
        case 50: 
          { columna += 3;return new Symbol(symG.VAR,columna,linea,"VAR");
          }
        case 134: break;
        case 51: 
          { columna += 4;return new Symbol(symG.CASO,columna,linea,new String(yytext()));
          }
        case 135: break;
        case 52: 
          { columna += 4;return new Symbol(symG.BOOL,columna,linea,"BOOL");
          }
        case 136: break;
        case 53: 
          { columna += 4;return new Symbol(symG.SINO,columna,linea,new String(yytext()));
          }
        case 137: break;
        case 54: 
          { columna += 4;return new Symbol(symG.PARA,columna,linea,new String(yytext()));
          }
        case 138: break;
        case 55: 
          { columna += 5;return new Symbol(symG.NUEVO,columna,linea,new String(yytext()));
          }
        case 139: break;
        case 56: 
          { columna += 5;return new Symbol(symG.DONDE,columna,linea,new String(yytext()));
          }
        case 140: break;
        case 57: 
          { columna += 5;return new Symbol(symG.VACIO,columna,linea,"VACIO");
          }
        case 141: break;
        case 58: 
          { columna += 5;return new Symbol(symG.FALSE,columna,linea,"FALSO");
          }
        case 142: break;
        case 59: 
          { columna += 5;return new Symbol(symG.HACER,columna,linea,new String(yytext()));
          }
        case 143: break;
        case 60: 
          { columna += 6;return new Symbol(symG.ENTERO,columna,linea,"ENTERO");
          }
        case 144: break;
        case 61: 
          { columna += 6;return new Symbol(symG.CADENA,columna,linea,"CADENA");
          }
        case 145: break;
        case 62: 
          { columna += 6;return new Symbol(symG.LLAMAR,columna,linea,new String(yytext()));
          }
        case 146: break;
        case 63: 
          { columna += 6;return new Symbol(symG.HEREDA,columna,linea,new String(yytext()));
          }
        case 147: break;
        case 64: 
          { columna += 7;return new Symbol(symG.DECIMAL,columna,linea,"DECIMAL");
          }
        case 148: break;
        case 65: 
          { columna += 7;return new Symbol(symG.DEFECTO,columna,linea,new String(yytext()));
          }
        case 149: break;
        case 66: 
          { columna += 7;return new Symbol(symG.COLUMNA,columna,linea,new String(yytext()));
          }
        case 150: break;
        case 67: 
          { columna += 7;return new Symbol(symG.PRIVADO,columna,linea,new String(yytext()));
          }
        case 151: break;
        case 68: 
          { columna += 7;return new Symbol(symG.PUBLICO,columna,linea,new String(yytext()));
          }
        case 152: break;
        case 69: 
          { columna += 8;return new Symbol(symG.TERMINAR,columna,linea,new String(yytext()));
          }
        case 153: break;
        case 70: 
          { columna += 8;return new Symbol(symG.RETORNAR,columna,linea,new String(yytext()));
          }
        case 154: break;
        case 71: 
          { columna += 8;return new Symbol(symG.CARACTER,columna,linea,"CARACTER");
          }
        case 155: break;
        case 72: 
          { columna += 9;return new Symbol(symG.IMPRIMIRK,columna,linea,new String(yytext()));
          }
        case 156: break;
        case 73: 
          { columna += 8;return new Symbol(symG.IMPORTAR,columna,linea,new String(yytext()));
          }
        case 157: break;
        case 74: 
          { columna += 8;return new Symbol(symG.MIENTRAS,columna,linea,new String(yytext()));
          }
        case 158: break;
        case 75: 
          { columna += 8;return new Symbol(symG.LLAMARHK,columna,linea,new String(yytext()));
          }
        case 159: break;
        case 76: 
          { columna += 8;return new Symbol(symG.PROCESAR,columna,linea,new String(yytext()));
          }
        case 160: break;
        case 77: 
          { columna += 9;return new Symbol(symG.DONDETODO,columna,linea,new String(yytext()));
          }
        case 161: break;
        case 78: 
          { columna += 9;return new Symbol(symG.DONDECADA,columna,linea,new String(yytext()));
          }
        case 162: break;
        case 79: 
          { columna += 9;return new Symbol(symG.CONTINUAR,columna,linea,new String(yytext()));
          }
        case 163: break;
        case 80: 
          { columna += 9;return new Symbol(symG.SELECCION,columna,linea,new String(yytext()));
          }
        case 164: break;
        case 81: 
          { columna += 9;return new Symbol(symG.TRUE,columna,linea,"VERDADERO");
          }
        case 165: break;
        case 82: 
          { columna += 10;return new Symbol(symG.PROTEGIDO,columna,linea,new String(yytext()));
          }
        case 166: break;
        case 83: 
          { columna += 10;return new Symbol(symG.INCLUIR_HK,columna,linea,new String(yytext()));
          }
        case 167: break;
        case 84: 
          { columna += 17;return new Symbol(symG.GRAPHIKAR_FUNCION,columna,linea,new String(yytext()));
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(symG.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
