
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 17 16:23:12 CST 2017
//----------------------------------------------------

package Compilador.Haskell;

import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.lang.*;
import java.io.FileReader;
import javax.swing.JOptionPane;
import Compilador.NodoParser;
import Compilador.Analizador;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 17 16:23:12 CST 2017
  */
public class ParserHC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserHC() {super();}

  /** Constructor which sets the default scanner. */
  public ParserHC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserHC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\005\004\000\002\005\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\007\005\000" +
    "\002\007\006\000\002\010\005\000\002\011\007\000\002" +
    "\011\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\003\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\003\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\004\000\002\013\010\000\002\026\005\000\002" +
    "\026\003\000\002\014\005\000\002\015\005\000\002\015" +
    "\003\000\002\016\006\000\002\016\004\000\002\016\004" +
    "\000\002\016\004\000\002\016\004\000\002\016\004\000" +
    "\002\016\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\034\004\010\026\023\031\033\034\012\040" +
    "\005\054\032\061\020\062\035\063\007\064\027\065\014" +
    "\066\034\067\036\001\002\000\044\002\ufffd\004\ufffd\025" +
    "\ufffd\026\ufffd\031\ufffd\033\ufffd\034\ufffd\040\ufffd\054\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\071\ufffd\001\002\000\030\004\010\026\023\040\005" +
    "\054\032\061\020\062\035\063\007\064\027\065\014\066" +
    "\034\067\036\001\002\000\004\025\204\001\002\000\120" +
    "\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\054\uffdc\055\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\071\uffdc" +
    "\001\002\000\040\010\152\011\146\012\134\013\153\014" +
    "\141\015\135\016\145\017\150\020\140\021\137\022\142" +
    "\023\143\024\136\036\151\061\147\001\002\000\036\002" +
    "\uffff\004\010\026\023\031\033\034\012\040\005\054\032" +
    "\061\020\062\035\063\007\064\027\065\014\066\034\067" +
    "\036\001\002\000\030\004\010\026\023\040\005\054\032" +
    "\061\020\062\035\063\007\064\027\065\014\066\034\067" +
    "\036\001\002\000\120\002\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\001\002\000\120\002\uffd9\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\070\uffd9\071\uffd9\001\002\000\050" +
    "\002\ufffa\004\ufffa\025\ufffa\026\ufffa\027\046\030\047\031" +
    "\ufffa\033\ufffa\034\ufffa\040\ufffa\054\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa\001" +
    "\002\000\120\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051" +
    "\uffdd\052\uffdd\054\uffdd\055\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070" +
    "\uffdd\071\uffdd\001\002\000\120\002\uffe0\004\uffe0\005\uffe0" +
    "\006\074\007\075\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0\055\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066" +
    "\uffe0\067\uffe0\070\uffe0\071\uffe0\001\002\000\120\002\uffd6" +
    "\004\uffd6\005\uffd6\006\uffd6\007\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6" +
    "\055\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\001\002" +
    "\000\114\002\uffe4\004\uffe4\005\070\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\041\072\042\071\043\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\054\uffe4" +
    "\055\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\071\uffe4\001\002" +
    "\000\106\002\uffe7\004\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\037\065" +
    "\040\066\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\054\uffe7\055\uffe7\057\uffe7\060\uffe7" +
    "\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\001\002\000\120\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\001\002\000\104" +
    "\002\uffee\004\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\040\uffee\043\063" +
    "\044\062\045\056\046\057\047\061\050\060\051\uffee\052" +
    "\uffee\054\uffee\055\uffee\057\uffee\060\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\071" +
    "\uffee\001\002\000\120\002\uffd4\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050" +
    "\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4\057\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\001\002\000\070\002\ufff0\004\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\040\ufff0\051\ufff0\052\054\054\ufff0" +
    "\055\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064" +
    "\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\001\002" +
    "\000\120\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051\uffda" +
    "\052\uffda\054\uffda\055\uffda\057\uffda\060\uffda\061\uffda\062" +
    "\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda" +
    "\071\uffda\001\002\000\066\002\ufff2\004\ufff2\025\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\040\ufff2\051\052\054\ufff2\055\ufff2\057\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\071\ufff2\001\002\000\004\002\121\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\120\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070" +
    "\uffd8\071\uffd8\001\002\000\120\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037\uffdb\040\uffdb" +
    "\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\071\uffdb\001\002\000\030\004\010" +
    "\026\023\040\005\054\032\061\020\062\035\063\007\064" +
    "\027\065\014\066\034\067\036\001\002\000\004\002\000" +
    "\001\002\000\006\025\042\033\041\001\002\000\034\004" +
    "\010\026\023\031\033\034\012\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\044\002\ufffc\004\ufffc\025\ufffc\026\ufffc\031\ufffc" +
    "\033\ufffc\034\ufffc\040\ufffc\054\ufffc\061\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\071\ufffc\001\002" +
    "\000\040\004\010\025\ufff9\026\023\031\033\033\ufff9\034" +
    "\012\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\044\002\ufffe\004" +
    "\ufffe\025\ufffe\026\ufffe\031\ufffe\033\ufffe\034\ufffe\040\ufffe" +
    "\054\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\067\ufffe\071\ufffe\001\002\000\010\027\046\030\047" +
    "\070\050\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\120\002\uffd2\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\054\uffd2\055\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\067\uffd2\070\uffd2\071\uffd2\001\002\000\066\002\ufff3\004" +
    "\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\040\ufff3\051\052\054\ufff3\055" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\001\002\000" +
    "\030\004\010\026\023\040\005\054\032\061\020\062\035" +
    "\063\007\064\027\065\014\066\034\067\036\001\002\000" +
    "\070\002\ufff1\004\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\040\ufff1\051" +
    "\ufff1\052\054\054\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\001\002\000\030\004\010\026\023\040\005" +
    "\054\032\061\020\062\035\063\007\064\027\065\014\066" +
    "\034\067\036\001\002\000\104\002\uffef\004\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\040\uffef\043\063\044\062\045\056\046\057" +
    "\047\061\050\060\051\uffef\052\uffef\054\uffef\055\uffef\057" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\071\uffef\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\030\004" +
    "\010\026\023\040\005\054\032\061\020\062\035\063\007" +
    "\064\027\065\014\066\034\067\036\001\002\000\106\002" +
    "\uffed\004\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\037\065\040\066\043" +
    "\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\051\uffed" +
    "\052\uffed\054\uffed\055\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\071\uffed\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\114\002\uffe5\004\uffe5\005\070\025" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\037\uffe5\040\uffe5\041\072\042\071\043" +
    "\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\054\uffe5\055\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5" +
    "\071\uffe5\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\030\004\010\026\023\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\001\002\000\120\002\uffe3\004\uffe3\005\uffe3\006" +
    "\074\007\075\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\057\uffe3\060" +
    "\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\071\uffe3\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\120\002\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde" +
    "\065\uffde\066\uffde\067\uffde\070\uffde\071\uffde\001\002\000" +
    "\120\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\025\uffdf" +
    "\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034" +
    "\uffdf\035\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\054\uffdf\055\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\001\002\000\120\002\uffe2\004\uffe2\005\uffe2\006\074" +
    "\007\075\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050" +
    "\uffe2\051\uffe2\052\uffe2\054\uffe2\055\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\001\002\000\120\002\uffe1\004\uffe1" +
    "\005\uffe1\006\074\007\075\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046" +
    "\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\055\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1\001\002\000\114" +
    "\002\uffe6\004\uffe6\005\070\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6" +
    "\040\uffe6\041\072\042\071\043\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6" +
    "\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002\000\106" +
    "\002\uffec\004\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037\065\040\066" +
    "\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\054\uffec\055\uffec\057\uffec\060\uffec\061\uffec" +
    "\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070" +
    "\uffec\071\uffec\001\002\000\106\002\uffe9\004\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\037\065\040\066\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\055" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\001\002\000" +
    "\106\002\uffe8\004\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\065\040" +
    "\066\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8" +
    "\051\uffe8\052\uffe8\054\uffe8\055\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\070\uffe8\071\uffe8\001\002\000\106\002\uffea\004\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\037\065\040\066\043\uffea\044\uffea\045" +
    "\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea" +
    "\055\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064" +
    "\uffea\065\uffea\066\uffea\067\uffea\070\uffea\071\uffea\001\002" +
    "\000\106\002\uffeb\004\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\065" +
    "\040\066\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\054\uffeb\055\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\070\uffeb\071\uffeb\001\002\000\066\002\ufff4\004\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\040\ufff4\051\052\054\ufff4\055\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\001\002\000\010" +
    "\027\046\030\047\032\112\001\002\000\034\004\010\026" +
    "\023\031\033\034\012\040\005\054\032\061\020\062\035" +
    "\063\007\064\027\065\014\066\034\067\036\001\002\000" +
    "\040\004\010\025\ufff8\026\023\031\033\033\ufff8\034\012" +
    "\040\005\054\032\061\020\062\035\063\007\064\027\065" +
    "\014\066\034\067\036\001\002\000\012\027\046\030\047" +
    "\055\uffcb\060\uffcb\001\002\000\006\055\117\060\116\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\120\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\054\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\001\002\000\012\027\046\030\047\055\uffcc" +
    "\060\uffcc\001\002\000\004\002\001\001\002\000\034\004" +
    "\010\026\023\027\046\030\047\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\010\027\046\030\047\035\131\001\002\000\032" +
    "\004\010\025\ufff7\026\023\040\005\054\032\061\020\062" +
    "\035\063\007\064\027\065\014\066\034\067\036\001\002" +
    "\000\010\027\046\030\047\035\126\001\002\000\034\004" +
    "\010\026\023\031\033\034\012\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\036\004\010\026\023\031\033\034\012\040\005" +
    "\054\032\061\020\062\035\063\007\064\027\065\014\066" +
    "\034\067\036\071\130\001\002\000\032\004\ufff6\025\ufff6" +
    "\026\ufff6\040\ufff6\054\ufff6\061\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\066\ufff6\067\ufff6\001\002\000\034\004\010" +
    "\026\023\031\033\034\012\040\005\054\032\061\020\062" +
    "\035\063\007\064\027\065\014\066\034\067\036\001\002" +
    "\000\036\004\010\026\023\031\033\034\012\040\005\054" +
    "\032\061\020\062\035\063\007\064\027\065\014\066\034" +
    "\067\036\071\133\001\002\000\032\004\ufff5\025\ufff5\026" +
    "\ufff5\040\ufff5\054\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\067\ufff5\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\030\004\010\026" +
    "\023\040\005\054\032\061\020\062\035\063\007\064\027" +
    "\065\014\066\034\067\036\001\002\000\004\004\173\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\004\056\162\001\002\000\030\004\010\026\023" +
    "\040\005\054\032\061\020\062\035\063\007\064\027\065" +
    "\014\066\034\067\036\001\002\000\004\061\156\001\002" +
    "\000\030\004\010\026\023\040\005\054\032\061\020\062" +
    "\035\063\007\064\027\065\014\066\034\067\036\001\002" +
    "\000\030\004\010\026\023\040\005\054\032\061\020\062" +
    "\035\063\007\064\027\065\014\066\034\067\036\001\002" +
    "\000\010\004\uffc6\027\046\030\047\001\002\000\010\004" +
    "\uffc9\027\046\030\047\001\002\000\004\053\157\001\002" +
    "\000\030\004\010\026\023\040\005\054\032\061\020\062" +
    "\035\063\007\064\027\065\014\066\034\067\036\001\002" +
    "\000\010\004\uffca\027\046\030\047\001\002\000\010\004" +
    "\uffc2\027\046\030\047\001\002\000\030\004\010\026\023" +
    "\040\005\054\032\061\020\062\035\063\007\064\027\065" +
    "\014\066\034\067\036\001\002\000\006\057\166\060\165" +
    "\001\002\000\012\027\046\030\047\057\uffce\060\uffce\001" +
    "\002\000\030\004\010\026\023\040\005\054\032\061\020" +
    "\062\035\063\007\064\027\065\014\066\034\067\036\001" +
    "\002\000\004\004\167\001\002\000\120\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0" +
    "\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\001\002\000\012" +
    "\027\046\030\047\057\uffcf\060\uffcf\001\002\000\010\004" +
    "\uffc8\027\046\030\047\001\002\000\010\004\uffc3\027\046" +
    "\030\047\001\002\000\120\002\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\052\uffd7\054\uffd7\055\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7" +
    "\067\uffd7\070\uffd7\071\uffd7\001\002\000\010\004\uffbe\027" +
    "\046\030\047\001\002\000\010\004\uffbf\027\046\030\047" +
    "\001\002\000\010\004\uffc5\027\046\030\047\001\002\000" +
    "\010\004\uffc1\027\046\030\047\001\002\000\010\004\uffc0" +
    "\027\046\030\047\001\002\000\010\004\uffbd\027\046\030" +
    "\047\001\002\000\010\004\uffc4\027\046\030\047\001\002" +
    "\000\010\004\uffc7\027\046\030\047\001\002\000\044\002" +
    "\ufffb\004\ufffb\025\ufffb\026\ufffb\031\ufffb\033\ufffb\034\ufffb" +
    "\040\ufffb\054\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\071\ufffb\001\002\000\120\002\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045" +
    "\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\042\002\030\003\036\005\010\006\003\007" +
    "\037\010\005\012\014\013\024\014\012\017\027\020\025" +
    "\021\023\022\021\023\020\024\016\025\015\001\001\000" +
    "\002\001\001\000\010\013\024\014\012\025\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\143\001" +
    "\001\000\034\006\043\007\037\010\005\012\014\013\024" +
    "\014\012\017\027\020\025\021\023\022\021\023\020\024" +
    "\016\025\015\001\001\000\026\012\121\013\024\014\012" +
    "\017\027\020\025\021\023\022\021\023\020\024\016\025" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\113\013\024\014\012\015\114\017\027\020\025\021" +
    "\023\022\021\023\020\024\016\025\015\001\001\000\026" +
    "\012\110\013\024\014\012\017\027\020\025\021\023\022" +
    "\021\023\020\024\016\025\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\044\013\024\014\012\017" +
    "\027\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\042\006\003\007\037\010\005\012\014\013\024\014\012" +
    "\017\027\020\025\021\023\022\021\023\020\024\016\025" +
    "\015\001\001\000\002\001\001\000\034\006\043\007\037" +
    "\010\005\012\014\013\024\014\012\017\027\020\025\021" +
    "\023\022\021\023\020\024\016\025\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\024\014\012\017" +
    "\107\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\024\013\024\014\012\017\050\020\025\021" +
    "\023\022\021\023\020\024\016\025\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\024\014\012\020" +
    "\052\021\023\022\021\023\020\024\016\025\015\001\001" +
    "\000\002\001\001\000\020\013\024\014\012\021\054\022" +
    "\021\023\020\024\016\025\015\001\001\000\002\001\001" +
    "\000\016\013\024\014\012\022\106\023\020\024\016\025" +
    "\015\001\001\000\016\013\024\014\012\022\105\023\020" +
    "\024\016\025\015\001\001\000\016\013\024\014\012\022" +
    "\104\023\020\024\016\025\015\001\001\000\016\013\024" +
    "\014\012\022\103\023\020\024\016\025\015\001\001\000" +
    "\016\013\024\014\012\022\102\023\020\024\016\025\015" +
    "\001\001\000\016\013\024\014\012\022\063\023\020\024" +
    "\016\025\015\001\001\000\002\001\001\000\014\013\024" +
    "\014\012\023\101\024\016\025\015\001\001\000\014\013" +
    "\024\014\012\023\066\024\016\025\015\001\001\000\002" +
    "\001\001\000\012\013\024\014\012\024\100\025\015\001" +
    "\001\000\012\013\024\014\012\024\077\025\015\001\001" +
    "\000\012\013\024\014\012\024\072\025\015\001\001\000" +
    "\002\001\001\000\010\013\024\014\012\025\076\001\001" +
    "\000\010\013\024\014\012\025\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\112\006\003\007" +
    "\037\010\005\012\014\013\024\014\012\017\027\020\025" +
    "\021\023\022\021\023\020\024\016\025\015\001\001\000" +
    "\034\006\043\007\037\010\005\012\014\013\024\014\012" +
    "\017\027\020\025\021\023\022\021\023\020\024\016\025" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\117\013\024\014\012\017\027\020\025\021\023\022" +
    "\021\023\020\024\016\025\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\011\123\012" +
    "\122\013\024\014\012\017\027\020\025\021\023\022\021" +
    "\023\020\024\016\025\015\001\001\000\002\001\001\000" +
    "\026\012\124\013\024\014\012\017\027\020\025\021\023" +
    "\022\021\023\020\024\016\025\015\001\001\000\002\001" +
    "\001\000\036\005\126\006\003\007\037\010\005\012\014" +
    "\013\024\014\012\017\027\020\025\021\023\022\021\023" +
    "\020\024\016\025\015\001\001\000\034\006\043\007\037" +
    "\010\005\012\014\013\024\014\012\017\027\020\025\021" +
    "\023\022\021\023\020\024\016\025\015\001\001\000\002" +
    "\001\001\000\036\005\131\006\003\007\037\010\005\012" +
    "\014\013\024\014\012\017\027\020\025\021\023\022\021" +
    "\023\020\024\016\025\015\001\001\000\034\006\043\007" +
    "\037\010\005\012\014\013\024\014\012\017\027\020\025" +
    "\021\023\022\021\023\020\024\016\025\015\001\001\000" +
    "\002\001\001\000\026\012\202\013\024\014\012\017\027" +
    "\020\025\021\023\022\021\023\020\024\016\025\015\001" +
    "\001\000\026\012\201\013\024\014\012\017\027\020\025" +
    "\021\023\022\021\023\020\024\016\025\015\001\001\000" +
    "\026\012\200\013\024\014\012\017\027\020\025\021\023" +
    "\022\021\023\020\024\016\025\015\001\001\000\026\012" +
    "\177\013\024\014\012\017\027\020\025\021\023\022\021" +
    "\023\020\024\016\025\015\001\001\000\026\012\176\013" +
    "\024\014\012\017\027\020\025\021\023\022\021\023\020" +
    "\024\016\025\015\001\001\000\026\012\175\013\024\014" +
    "\012\017\027\020\025\021\023\022\021\023\020\024\016" +
    "\025\015\001\001\000\026\012\174\013\024\014\012\017" +
    "\027\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\026\012\173\013\024\014\012\017\027\020" +
    "\025\021\023\022\021\023\020\024\016\025\015\001\001" +
    "\000\002\001\001\000\026\012\171\013\024\014\012\017" +
    "\027\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\026\012\170\013\024\014\012\017\027\020" +
    "\025\021\023\022\021\023\020\024\016\025\015\001\001" +
    "\000\002\001\001\000\026\012\160\013\024\014\012\017" +
    "\027\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\002\001\001\000\026\012\154\013\024\014" +
    "\012\017\027\020\025\021\023\022\021\023\020\024\016" +
    "\025\015\001\001\000\026\012\153\013\024\014\012\017" +
    "\027\020\025\021\023\022\021\023\020\024\016\025\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\157\013\024\014\012\017\027\020\025" +
    "\021\023\022\021\023\020\024\016\025\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\163\013\024" +
    "\014\012\017\027\020\025\021\023\022\021\023\020\024" +
    "\016\025\015\026\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\167\013\024\014\012\017\027\020" +
    "\025\021\023\022\021\023\020\024\016\025\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserHC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserHC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserHC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Reporte de error encontrado. */
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea: " + (s.right + 1) + " columna "+ s.left + "Identificador " + s.value + "no reconocido");
    }
   
   /* errores fatales */
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        javax.swing.JOptionPane.showMessageDialog(null, "Error sintactico en la linea "+ (s.right + 1) + " columna " + s.left + " Identificador = " + s.value +", "+s.sym+ " no reconocido");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserHC$actions {
  private final ParserHC parser;

  /** Constructor */
  CUP$ParserHC$actions(ParserHC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserHC$do_action(
    int                        CUP$ParserHC$act_num,
    java_cup.runtime.lr_parser CUP$ParserHC$parser,
    java.util.Stack            CUP$ParserHC$stack,
    int                        CUP$ParserHC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserHC$result;

      /* select the action based on the action number */
      switch (CUP$ParserHC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // funPropias ::= LENGTH exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("LENGTH","LENGTH");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // funPropias ::= DESC exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("DESC","DESC");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // funPropias ::= ASC exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("ASC","ASC");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // funPropias ::= PAR exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("PAR","PAR");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // funPropias ::= IMPR exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("IMPR","IMPR");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // funPropias ::= REVERS exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("REVERS","REVERS");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // funPropias ::= PRODUCT exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("PRODUCT","PRODUCT");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // funPropias ::= SUM exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("SUM","SUM");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // funPropias ::= MAX exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("MAX","MAX");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // funPropias ::= MIN exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("MIN","MIN");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // funPropias ::= DECC exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("DECC","DECC");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // funPropias ::= SUCC exp 
            {
              NodoParser RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("SUCC","SUCC");
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // funPropias ::= CALCULAR exp 
            {
              NodoParser RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n = new NodoParser("CALCULAR","CALCULAR");
					RESULT.AgregarHijo(n);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // funPropias ::= LET ID IGUAL exp 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
					RESULT = new NodoParser("funPropias","funPropias");
					NodoParser n5 = new NodoParser("LET","LET");
					NodoParser n = new NodoParser("ID",id);
					RESULT.AgregarHijo(n5);
					RESULT.AgregarHijo(n);
					RESULT.AgregarHijo(e);
					
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("funPropias",12, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listaExp ::= exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = new NodoParser("listaExp","listaExp");
				RESULT.AgregarHijo(e);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("listaExp",11, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listaExp ::= listaExp COMA exp 
            {
              NodoParser RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser l = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = l;
				RESULT.AgregarHijo(e);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("listaExp",11, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lista ::= COR1 listaExp COR2 
            {
              NodoParser RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser l = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		
				RESULT = new NodoParser("lista","lista");
				RESULT.AgregarHijo(l);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("lista",10, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enviados ::= exp 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = new NodoParser("enviados","enviados");
				RESULT.AgregarHijo(e);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("enviados",20, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // enviados ::= enviados COMA exp 
            {
              NodoParser RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser l = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = l;
				RESULT.AgregarHijo(e);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("enviados",20, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // llamada ::= DOLAR ID LLA1 enviados LLA2 DOLAR 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser l = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		
					RESULT = new NodoParser("llamada","llamada");
					NodoParser n = new NodoParser("ID",id);
					RESULT.AgregarHijo(n);
					RESULT.AgregarHijo(l);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("llamada",9, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-5)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp8 ::= MENOS exp8 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("unario","unario");
			RESULT.AgregarHijo(e);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp8 ::= PAR1 exp PAR2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		
			RESULT = e;
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp8 ::= PORCENTAJE 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("%","%");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp8 ::= llamada 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp8 ::= lista 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp8 ::= ID 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("ID",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp8 ::= DOLAR funPropias DOLAR 
            {
              NodoParser RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser n = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		
			RESULT = new NodoParser("exp","exp");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp8 ::= FALSE 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("FALSE","false");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp8 ::= TRUE 
            {
              NodoParser RESULT =null;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("TRUE","true");
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp8 ::= CARACTER 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("CARACTER",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp8 ::= NUMERO 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("NUMERO",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp8 ::= CADENA 
            {
              NodoParser RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("CADENA",id);
			RESULT.AgregarHijo(n);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp8",19, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp7 ::= exp8 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		RESULT = e;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp7",18, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp7 ::= exp7 POT exp8 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("POT","pot");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp7",18, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp7 ::= exp7 SQRT exp8 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("SQRT","sqrt");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp7",18, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp6 ::= exp7 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		 
			RESULT = e;
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp6",17, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp6 ::= exp6 MOD exp7 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MOD","mod");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp6",17, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp6 ::= exp6 DIV exp7 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("DIV","/");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp6",17, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp6 ::= exp6 POR exp7 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("POR","*");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp6",17, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp5 ::= exp6 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp5",16, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp5 ::= exp5 MENOS exp6 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENOS","-");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp5",16, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp5 ::= exp5 MAS exp6 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAS","+");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp5",16, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp4 ::= exp5 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		RESULT = e;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp4 ::= exp4 NOIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("NOIGUAL","!=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp4 ::= exp4 IGUALIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("IGUALIGUAL","==");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp4 ::= exp4 MENORIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENORIGUAL","<=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp4 ::= exp4 MAYORIGUAL exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAYORIGUAL",">=");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp4 ::= exp4 MENOR exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MENOR","<");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp4 ::= exp4 MAYOR exp5 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("MAYOR",">");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp4",15, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp3 ::= exp4 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp3",14, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp3 ::= exp3 AND exp4 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("AND","&&");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp3",14, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp2 ::= exp3 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = e;
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp2",13, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp2 ::= exp2 OR exp3 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("exp","exp");
			NodoParser n = new NodoParser("OR","||");
			RESULT.AgregarHijo(e1);
			RESULT.AgregarHijo(n);
			RESULT.AgregarHijo(e2);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp2",13, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp2 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
    	RESULT = e;
    	
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp EXCLAMACION exp2 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
    	RESULT = new NodoParser("exp","exp");
		NodoParser n = new NodoParser("EXCLAMACION","!!");
		RESULT.AgregarHijo(e1);
		RESULT.AgregarHijo(n);
		RESULT.AgregarHijo(e2);
    	
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp MASMAS exp2 
            {
              NodoParser RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser e2 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
		RESULT = new NodoParser("exp","exp");
		NodoParser n = new NodoParser("MASMAS","++");
		RESULT.AgregarHijo(e1);
		RESULT.AgregarHijo(n);
		RESULT.AgregarHijo(e2);
		
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // casos ::= exp DOSPUNTOS codigo PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		
				RESULT = new NodoParser("casos","casos");
				NodoParser n = new NodoParser("caso","caso");
				n.AgregarHijo(e);
				n.AgregarHijo(c);
				RESULT.AgregarHijo(n);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("casos",7, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // casos ::= casos exp DOSPUNTOS codigo PUNTOYCOMA 
            {
              NodoParser RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).right;
		NodoParser r1 = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		
				RESULT = r1;
				NodoParser n = new NodoParser("caso","caso");
				n.AgregarHijo(e);
				n.AgregarHijo(c);
				RESULT.AgregarHijo(n);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("casos",7, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-4)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // selecciona ::= SELECCIONA exp casos 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = new NodoParser("SELECCIONA","SELECCIONA");
				RESULT.AgregarHijo(e);
				RESULT.AgregarHijo(c);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("selecciona",6, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // si ::= SI exp ENTONCES codigo 
            {
              NodoParser RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser e = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = new NodoParser("SI","SI");
			RESULT.AgregarHijo(e);
			RESULT.AgregarHijo(c);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("si",5, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-3)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // si ::= si SINO codigo 
            {
              NodoParser RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).right;
		NodoParser s = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
			RESULT = s;
			RESULT.AgregarHijo(c);
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("si",5, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-2)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= exp 
            {
              NodoParser RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser x = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		RESULT = x;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= selecciona END 
            {
              NodoParser RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser x = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		RESULT = x;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= si END 
            {
              NodoParser RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser x = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		RESULT = x;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("instrucciones",4, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo ::= instrucciones 
            {
              NodoParser RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = new NodoParser("codigo","codigo");
				RESULT.AgregarHijo(i);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= codigo instrucciones 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser i = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		
				RESULT = c;
				RESULT.AgregarHijo(i);
				
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // haskell ::= codigo 
            {
              NodoParser RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser c = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		RESULT = c;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("haskell",1, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= haskell 
            {
              NodoParser RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()).right;
		NodoParser h = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.peek()).value;
		Analizador.raiz = h; 
			System.out.println("Compilacion exitos haskell consola!!");
			
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          return CUP$ParserHC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).right;
		NodoParser start_val = (NodoParser)((java_cup.runtime.Symbol) CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)).value;
		RESULT = start_val;
              CUP$ParserHC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserHC$stack.elementAt(CUP$ParserHC$top-1)), ((java_cup.runtime.Symbol)CUP$ParserHC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserHC$parser.done_parsing();
          return CUP$ParserHC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

